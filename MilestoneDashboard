<!DOCTYPE html>
<html>
<head>
    <title>Milestone Tracking Board</title>
    <!--  (c) 2015 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Tue Dec 17 2019 17:53:41 GMT-0800 (Pacific Standard Time) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Thu Dec 12 2019 17:53:41 GMT-0800 (Pacific Standard Time)";
        var CHECKSUM = 288551633478;
    </script>
    
    <script type="text/javascript" src="/apps/2.1/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350, 
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        console.log("_checkChecksum", container);
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if (! app.isExternal() ) {
                
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

(function() {
    var Ext = window.Ext4 || window.Ext;

    /**
     * Abstract class to handle expanding / collapsing for banner widgets
     */
    Ext.define('MilestoneTrackingApp.BannerWidget', {
        extend: 'Ext.Component',
        alias: 'widget.bannerwidget',

        config: {
            expanded: true
        },

        cls: 'stat-panel',

        data: {},

        tpl: [
            '<div class="expanded-widget"></div>',
            '<div class="collapsed-widget"></div>'
        ],

        onRender: function() {
            if (this.expanded) {
                this.removeCls('collapsed');
            } else {
                this.addCls('collapsed');
            }
            this.callParent(arguments);
        },

        expand: function() {
            this.removeCls('collapsed');
            this.setExpanded(true);
        },

        collapse: function() {
            this.addCls('collapsed');
            this.setExpanded(false);
        }
    });
})();

(function() {
    var Ext = window.Ext4 || window.Ext;

    //showTooltip = function(values){
    //    console.log('showTooltip',this)
    //};
    /**
     * gauge chart for stats banner
     * abstract class
     */
    Ext.define('MilestoneTrackingApp.ConfigurableGauge', {
        extend: 'MilestoneTrackingApp.BannerWidget',
        alias:'widget.statsbannerconfigurablegauge',

        requires: [
            'Rally.ui.chart.Chart',
            'Rally.util.Timebox',
            'Rally.util.Colors'
        ],


        tpl: [
            '<div class="expanded-widget">',
                '<div class="stat-title" id="{uniqueid}" >{title}&nbsp;<span class="icon-help"></span></div>', //data-qtip="{tooltip}"
                '<div class="stat-metric">',
                    '<div class="metric-chart"></div>',
                    '<div class="metric-chart-text percent-offset">',
                        '{percentage}<div class="metric-percent">%</div>',
                    '</div>',
                    '<div class="metric-subtext">{calculatedUnits} of {totalUnits} {unit}<tpl if="secondaryUnit">, {secondaryCalculatedUnits} of {secondaryTotalUnits} {secondaryUnit}</tpl></div>',
                '</div>',
            '</div>',
            '<div class="collapsed-widget">',
                '<div class="stat-title">{title}</div>',
                '<div class="stat-metric">{percentage}<span class="metric-percent">%</span></div>',
            '</div>'
        ],

        config: {
            calculatedUnitFilter: null,
            totalUnitFilter: null,
            data: {
                percentage: 0,
                calculatedUnits: 0,
                totalUnits: 0,
                unit: '',
                title: ''
            }
        },

        _tzOffsetPromises: {},


        getTooltip: function(values){
            if (values.tooltip){
                return values.tooltip;
            }
            return '';
        },
        initComponent: function() {
            this.mon(this.store, 'datachanged', this.onDataChanged, this);
            this.callParent(arguments);
        },
        onDataChanged: function() {
            var data = this._getRenderData();
            this.update(data);
            this.refreshChart(this._getChartConfig(data));
        },

        getChartEl: function() {
            return this.getEl().down('.metric-chart');
        },

        //Override this function in the parent.
        _getRenderData: function() {
            return {};
        },
        updateStore: function(store){
            this.store = store;
            this.mon(this.store, 'datachanged', this.onDataChanged, this);
            //this.store.on('load', this.onDataChanged, this);
        },
        _getChartConfig: function(renderData) {
               var data = [{
                        name: '',
                        y: 100,
                        color: Rally.util.Colors.grey1
               }];

                if (!Ext.isEmpty(renderData)){
                    if (renderData.chartData && renderData.chartData instanceof Array){
                        data = renderData.chartData;
                     } else {
                        var percentage = renderData.percentage,
                            percentagePlanned = percentage % 100 || 100,
                            color = Rally.util.Colors.cyan_med,
                            secondaryColor = Rally.util.Colors.grey1;

                        if (percentage > 100) {
                            color = Rally.util.Colors.blue;
                            secondaryColor = Rally.util.Colors.cyan;
                        } else if (percentage > 70) {
                            color = Rally.util.Colors.cyan;
                        } else if (percentage === 0) {
                            color = Rally.util.Colors.grey1;
                        }

                        data = [
                            {
                                name: renderData.title + ' Total',
                                y: percentagePlanned,
                                color: color
                            },
                            {
                                name: '',
                                y: 100 - percentagePlanned,
                                color: secondaryColor
                            }
                        ]
                    }
                }

            return {
                chartData: {
                    series: [{
                        data: data
                    }]
                }
            };
        },
        expand: function() {
            this.callParent();
            if (this.chart) {
                this.chart.doLayout();
            } else {
                this._addChart(this._getChartConfig({}));
            }
        },

        onRender: function() {
            this.callParent(arguments);
            if (this.store.getRange().length === 0) {
                this._addEmptyChart();
            }
            this.tooltipObject = Ext.create('Rally.ui.tooltip.ToolTip', {
                target: this.getEl(),
                html: this.tooltip
            });

            this.getEl().on('mouseenter', function(e,t){
                this.tooltipObject.show();
            }, this);
            this.getEl().on('mouseleave', function(e,t){
                this.tooltipObject.hide();
            }, this);

        },
        _addEmptyChart: function() {
            this._cleanupChart();
            this._addChart({
                chartData: {
                    series: [{
                        data: [
                            {
                                name: '',
                                y: 100,
                                color: Rally.util.Colors.grey1,
                                pct: "N/A"
                            }
                        ]
                    }]
                }
            });
        },

        _cleanupChart: function () {
            if (this.chart) {
                this.chart.destroy();
                delete this.chart;
            }
        },

        onDestroy: function () {
            this._cleanupChart();
            this.callParent(arguments);
        },

        onResize: function() {
            if (this.chart && !this.getEl().up('.stats-banner.collapsed')) {
                this.chart.updateLayout();
            }
            this.callParent(arguments);
        },

        refreshChart: function(chartConfig) {
            Ext.suspendLayouts();
            this._cleanupChart();
            if (this.rendered && this.expanded) {
                this._addChart(chartConfig);
            }
            Ext.resumeLayouts();
            this.fireEvent('ready', this);
        },

        _addChart: function(chartConfig) {
            var height = 70,
                tooltipConfig = this._getTooltipConfig(this.enableTooltip);
            this.chart = Ext.create('Rally.ui.chart.Chart', Ext.apply({
                loadMask: false,
                renderTo: this.getChartEl(),
                cls: 'gauge',
                chartConfig: {
                    chart: {
                        backgroundColor: 'rgba(255, 255, 255, 0.1)',
                        defaultSeriesType: 'pie',
                        height: height,
                        spacingTop: 0,
                        spacingRight: 0,
                        spacingBottom: 0,
                        spacingLeft: 0
                    },
                    plotOptions: {
                        pie: {
                            borderWidth: 0,
                            center: ['55%', '20%'],
                            dataLabels: {
                                enabled: false
                            },
                            size: height * .70,
                            innerSize: height * .60,
                            enableMouseTracking: true, //turns off chart hover, but for tooltips you'll need this on
                            shadow: false
                        }
                    },
                    title: '',
                    tooltip: tooltipConfig
                }
            }, chartConfig));
        },

        _getTooltipConfig: function(enableTooltip){

            if (!enableTooltip){
                return {
                    enabled: false
                };
            }

            return {
                enabled: true,
                backgroundColor: '#000000',
                borderWidth: 0,
                headerFormat:  '<span style="background-color:{point.color};"></span>{point.key}: {point.y}',
                pointFormat: '',
                style: {
                    fontFamily: "ProximaNova, Helvetica, Arial",
                    color: "#FFFFFF"
                }
            };
        },

        _getTZOffset: function() {
            var projectRef = Rally.util.Ref.getRelativeUri(this.getContext().getProject());
            if (!Ext.isDefined(this._tzOffsetPromises[projectRef])) {
                var deferred = this._tzOffsetPromises[projectRef] = Ext.create('Deft.Deferred');
                Rally.environment.getIoProvider().httpGet({
                    url: Rally.environment.getServer().getWsapiUrl() + '/iteration',
                    params: {
                        includeSchema: true,
                        pagesize:1,
                        fetch: false,
                        project: projectRef
                    },
                    success: function(results) {
                        deferred.resolve((results.Schema.properties.EndDate.format.tzOffset || 0) / 60);
                    },
                    requester: this,
                    scope: this
                });
            }
            return this._tzOffsetPromises[projectRef];
        }
    });
})();

(function() {
    var Ext = window.Ext4 || window.Ext;

    /**
     * Allows user to see stats for a timebox in a horizontal bar format
     */
    Ext.define('MilestoneTrackingApp.StatsBanner', {
        extend: 'Ext.container.Container',
        alias:'widget.statsbanner',
        mixins: [
            'Rally.Messageable',
            'Rally.clientmetrics.ClientMetricsRecordable'
        ],
        cls: 'stats-banner',
        layout: 'hbox',
        border: 0,
        width: '100%',
        stateful: true,
        stateEvents: ['expand', 'collapse'],
        filters: [],
        firstPortfolioItemName: 'Feature',

        config: {
            context: null,
            expanded: true,

        },

        items: [
            {
                xtype: 'statsbanneraccepted',
                byCount: true,
                title: 'Accepted User Stories',
                unitLabel: "User Stories",
                uniqueid: 'accepted-user-stories',
                expanded: this.expanded,
                flex: 2,
                tooltip: "<b>Accepted User Stories</b><p>Number of Accepted (or in the higher ScheduledState) User Stories that are explicitly associated with this Milestone.</p>"
            },{
                xtype: 'statsbanneraccepted',
                byCount: false,
                title: 'Accepted Points',
                unitLabel: "Points",
                expanded: this.expanded,
                uniqueid: 'accepted-points-user-stories',
                flex: 2,
                tooltip: "<b>Accepted Points</b> <p>Sum of Story Points tied to the Accepted (or in the higher ScheduledState) User Stories that are explicitly associated with this Milestone.</p>"
            },{
                xtype: 'statsbannertestcoverage',
                title: 'Test Coverage',
                unitLabel: 'user stories',
                expanded: this.expanded,
                flex: 2,
                tooltip: "<b>Test Case Coverage</b> <p>Number of User Stories associated with this Milestone, linked to atleast one test case.</p>"
            },{
                xtype: 'statsbannertestcases',
                title: 'Test Cases Executed',
                unitLabel: 'executed',
                expanded: this.expanded,
                testCaseTypes: [],
                flex: 2,
                enableTooltip: true,
                tooltip: "<b>Test Cases Executed:</b> <p>Test Cases to be considered executed should satisfy all the below:<br/>" +
                            "<ol><li>Every Test Case Result has a 'Verdict' (outcome)</li>" +
                            "<li>Test Case Result date is less than or equal to the Milestone Target Date</li>" +
                            "<li>Every Test Case result has an attachment</li>" +
                            "<li>Test Case belongs to an User Story that is associated with this Milestone.</li>" +
                            "</ol></p>"
            },{
                xtype: 'statsbannertestcases',
                title: 'UAT Tests Executed',
                unitLabel: 'executed',
                testCaseTypes: [],
                flex: 2,
                enableTooltip: true,
                tooltip: "<b>UAT Tests Executed</b> <p>Test Cases to be considered executed should satisfy all the below:<br/>" +
                "<ol><li>Test Type for the Test Case is 'User Acceptance Testing'</li>" +
                "<li>Every Test Case Result has a 'Verdict' (outcome)</li>" +
                "<li>Test Case Result date is less than or equal to the Milestone Target Date</li>" +
                "<li>Every Test Case result has an attachment</li>" +
                "<li>Test Case belongs to an User Story that is associated with this Milestone.</li>" +
                "</ol></p>"
            },{
                xtype: 'statsbannerdefects',
                title: 'Closed Defects',
                unitLabel: ' Defects',
                expanded: this.expanded,
                flex: 2,
                tooltip: "<b>Closed Defects</b> <p>Defects in Closed State that satisfy one of the following<br/>" +
                    "<ol><li>Defect is explicitly associated with this Milestone</li>" +
                "<li>Associated with an User Story that is explicitly associated with this Milestone</li>" +
                "<li>Associated with a TestCase that is associated with an User Story that is explicity associated with this Milestone</li>" +
                "</ol></p>"
            },{
              xtype: 'statsbannercollapseexpand',
              expanded: this.expanded
            }
        ],

        constructor: function(config) {
            this.callParent(arguments);
        },

        initComponent: function() {
            this.addEvents(
                /**
                 * @event
                 * Fires when expand is clicked
                 */
                'expand',
                /**
                 * @event
                 * Fires when collapse is clicked
                 */
                'collapse'
            );

            this.subscribe(this, Rally.Message.objectDestroy, this._update, this);
            this.subscribe(this, Rally.Message.objectCreate, this._update, this);
            this.subscribe(this, Rally.Message.objectUpdate, this._update, this);
            this.subscribe(this, Rally.Message.bulkUpdate, this._update, this);

            this._createWorkItemStore(this.customFilters);
            this._createTestCaseStore();


            //need to configure the items at the instance level, not the class level (i.e. don't use the 'defaults' config)
            this.items[4].testCaseTypes = this.uatTestCaseType;
            this.items = this._configureItems(this.items);

            this.on('expand', this._onExpand, this);
            this.on('collapse', this._onCollapse, this);
            this.store.on('load', this._checkForLateStories, this);
            this.testCaseStore.on('load', this._loadTestCaseResults, this);

            this.callParent(arguments);
            this._update();

        },
        addTestCaseResults: function(testCaseResults){
            this.testCaseResults = testCaseResults;
        },
        _loadTestCaseResults: function(store, testCases){
            if (!testCases || testCases.length === 0){
                return;
            }

            var targetDate = Rally.util.DateTime.fromIsoString(this.timeboxRecord.get(this.timeboxEndDateField)),
                testcaseResults = this.testCaseResults || null;

            if (testcaseResults){
                _.each(testCases, function(tc){
                    var results = _.filter(testcaseResults, function(tcr){ return tcr.get('TestCase').ObjectID === tc.get('ObjectID'); }),
                        resultsWithAttachments = _.filter(results, function(r){ return r.get('Attachments') && r.get('Attachments').Count > 0; });

                    tc.set('_resultsTotal',results.length);
                    tc.set('_resultsWithAttachments',resultsWithAttachments.length);
                    tc.set('_milestoneTargetDate', targetDate)
                });
                store.fireEvent('datachanged');

            } else {
                // var filters =  Rally.data.wsapi.Filter.or([{
                //     property: 'TestCase.Milestones.ObjectID',
                //     value:  this.timeboxRecord.get('ObjectID')
                // },{
                //     property: 'TestCase.WorkProduct.Milestones.ObjectID',
                //     value:  this.timeboxRecord.get('ObjectID')
                // }]);

                var filters = Ext.Array.map(testCases, function(tc){
                   return {
                      property: 'TestCase.ObjectID',
                      value: tc.get('ObjectID')
                   };
                });

                if (filters.length > 1){
                  filters = Rally.data.wsapi.Filter.or(filters);
                }

                if (filters.length === 0){
                  return;
                }

                Rally.technicalservices.Utilities.fetchWsapiRecords('TestCaseResult',filters,['ObjectID', 'TestCase','WorkProduct','FormattedID','Attachments']).then({
                    success: function(testcaseResults){
                         _.each(testCases, function(tc){
                            var results = _.filter(testcaseResults, function(tcr){ return tcr.get('TestCase').ObjectID === tc.get('ObjectID'); }),
                                resultsWithAttachments = _.filter(results, function(r){ return r.get('Attachments') && r.get('Attachments').Count > 0; });

                            tc.set('_resultsTotal',results.length);
                            tc.set('_resultsWithAttachments',resultsWithAttachments.length);
                            tc.set('_milestoneTargetDate', targetDate)
                        });
                        store.fireEvent('datachanged');
                    },
                    failure: function(msg){
                        Rally.ui.notify.Notifier.showError({message: "Error loading Test Case Result Information:  " + msg});
                    },
                    scope: this
                });
            }
        },
        _checkForLateStories: function(store){
            var lateStories = [],
                targetDate = Rally.util.DateTime.fromIsoString(this.timeboxRecord.get(this.timeboxEndDateField));

            _.each(this.store.getRange(), function(record){
                var iteration = record.get('Iteration'),
                    children = record.get('DirectChildrenCount') || 0;
                if (children === 0){
                    if (iteration){
                        if (Rally.util.DateTime.fromIsoString(iteration.EndDate) > targetDate){
                            lateStories.push(record);
                        }
                    } else {
                        lateStories.push(record);
                    }
                }

            }, this);
            if (lateStories.length > 0){
                this.fireEvent('latestoriesfound', lateStories);
            }
        },
        onRender: function() {
            if (this.expanded) {
                this.removeCls('collapsed');
            } else {
                this.addCls('collapsed');
            }
            this._setExpandedOnChildItems();
            this.callParent(arguments);
        },

        applyState: function (state) {
            if (Ext.isDefined(state.expanded)) {
                this.setExpanded(state.expanded);
            }
            this._setExpandedOnChildItems();
        },

        getState: function(){
            return {
                expanded: this.expanded
            };
        },

        _setExpandedOnChildItems: function() {
            _.each(this.items.getRange(), function(item) {
                item.setExpanded(this.expanded);
            }, this);
        },

        _getItemDefaults: function() {
            return {
                flex: 1,
                context: this.context,
                store: this.store,
                listeners: {
                    ready: this._onReady,
                    scope: this
                }
            };
        },

        _onReady: function() {
            this._readyCount = (this._readyCount || 0) + 1;
            if(this._readyCount === this.items.getCount()) {
                this.recordComponentReady();
                delete this._readyCount;
            }
        },

        _onCollapse: function() {
            this.addCls('collapsed');
            this.setExpanded(false);

            _.invoke(this.items.getRange(), 'collapse');
        },

        _onExpand: function() {
            this.removeCls('collapsed');
            this.setExpanded(true);

            _.invoke(this.items.getRange(), 'expand');
        },

        _hasTimebox: function() {
            return true;
        },

        _configureItems: function(items) {
            var idx = 0;
            var defaults = {
                flex: 1,
                context: this.context,
                store: this.store,
                uniqueid: this.uniqueid || 'id-' + idx++,
                timeboxRecord: this.timeboxRecord,
                timeboxEndDateField: this.timeboxEndDateField,
                scheduleStates: this.scheduleStates,
                closedDefectStates: this.closedDefectStates,
                resolvedDefectValues: this.resolvedDefectValues,
                testCaseStore: this.testCaseStore,
                listeners: {
                    ready: this._onReady,
                    scope: this
                }
            };

            return _.map(items, function(item) {
                return _.defaults(_.cloneDeep(item), defaults);
            });
        },

        _update: function () {
            if(this._hasTimebox()) {
                this.store.load();
                this.testCaseStore.load();
            }
        },
        _getWorkItemFilters: function(customFilters){
            var filters = Ext.create('Rally.data.wsapi.Filter',{
                property: 'Milestones.ObjectID',
                value: this.timeboxRecord.get('ObjectID')
            });
            filters = filters.or({
                property: 'Requirement.Milestones.ObjectID',
                value: this.timeboxRecord.get('ObjectID')
            });
            filters = filters.or({
                property: 'TestCase.WorkProduct.Milestones.ObjectID',
                value: this.timeboxRecord.get('ObjectID')
            });
            filters = filters.or({
                property: 'WorkProduct.Milestones.ObjectID',
                value: this.timeboxRecord.get('ObjectID')
            });

            if (customFilters && customFilters.filters && customFilters.filters.length > 0  && customFilters.types &&
                (Ext.Array.contains(customFilters.types, 'hierarchicalrequirement') || Ext.Array.contains(customFilters.types, 'defect'))
            ){
                var customFilter = Rally.data.wsapi.Filter.fromQueryString(customFilters.filters.toString());
                filters = filters.and(customFilter);
            }

            return filters;
        },
        _createTestCaseResultStore: function(){

            var filters =  Rally.data.wsapi.Filter.or([{
                property: 'TestCase.Milestones.ObjectID',
           //     operator: 'contains',
                value:  this.timeboxRecord.get('ObjectID')
            },{
                property: 'TestCase.WorkProduct.Milestones.ObjectID',
           //     operator: 'contains',
                value:  this.timeboxRecord.get('ObjectID')
            }]);

            this.testCaseResultStore = Ext.create('Rally.data.wsapi.Store',{
                model: 'TestCaseResult',
                filters: filters,
                fetch: ['ObjectID', 'TestCase','WorkProduct','FormattedID','Attachments'],
                //context: this.context.getDataContext(),
                context: {project: null},
                pageSize: 1000,
                limit: 'Infinity'
            });
        },

        _createTestCaseStore: function(){

            var filters =  Ext.create('Rally.data.wsapi.Filter',{
                property: 'WorkProduct.Milestones.ObjectID',
                value: this.timeboxRecord.get('ObjectID')
            });

            filters = filters.or({
                property: 'Milestones.ObjectID',
                value: this.timeboxRecord.get('ObjectID')
            });

console.log('CB-893', filters);
            this.testCaseStore = Ext.create('Rally.data.wsapi.Store',{
                model: 'TestCase',
                filters: filters,
                fetch: ['LastRun','LastVerdict','Attachments','Type','WorkProduct','ObjectID','FormattedID'],
                //context: this.context.getDataContext(),
                context: {project: null},
                pageSize: 2000,
                limit: 'Infinity'
            });
        },
        _createWorkItemStore: function(customFilters){
            var filters = this._getWorkItemFilters(customFilters);

            this.store = Ext.create('Rally.data.wsapi.artifact.Store', {
                models: ['HierarchicalRequirement','Defect'],
                fetch: ['ObjectID', 'FormattedID', 'ScheduleState', 'PlanEstimate','Iteration','Name','StartDate','EndDate','State','DirectChildrenCount','TestCases','Resolution'],
                filters: filters,
                pageSize: 1000,
                //context: this.context.getDataContext(),
                context: {project: null},
                limit: 'Infinity'
            });
        },
        updateFilters: function(customFilters){
            this.store = null;
            this._createWorkItemStore(customFilters);
            _.each(this.items.items, function(item) {
                if (item.updateStore) { item.updateStore(this.store); }
            }, this);
            this.store.load();
        }
    });
})();

(function () {
    var Ext = window.Ext4 || window.Ext;

    /**
     * Iteration Tracking Board App
     * The Iteration Tracking Board can be used to visualize and manage your User Stories and Defects within an Iteration.
     */
    Ext.define('technical-services-MilestoneTrackingApp', {
        extend: 'Rally.app.App',
        componentCls: 'iterationtrackingboard',
        logger: new Rally.technicalservices.Logger(),
       // settingsScope: 'project',
        //autoScroll: false,

        config: {
            defaultSettings: {
                ignoreProjectScoping: true,
                closedDefectStates: ['Closed'],
                resolvedDefectValues: [],
                displayTestCaseResultAttachments: true,
                uatTestCaseType: 'Acceptance',
                showStatsBanner: true,
                collapseStatsBanner: false,
                defaultColumns: ['Name','PercentDoneByStoryPlanEstimate','Owner','Release','State','ScheduleState','Iteration','PlanEstimate']
            }
        },
        items: [
            {xtype:'container',itemId:'selection_box', layout: {type: 'hbox'}, padding: 10},
            {xtype:'container',itemId:'banner_box'},
            {xtype:'container',itemId:'grid_box'}
        ],

        integrationHeaders : {
                name : "ts-MilestoneTrackingApp"
        },

        sModelNames: [],

        launch: function(){

            if(!this.rendered) {
                this.on('afterrender', this.launch, this, {single: true});
                return;
            }

            if (this._hasMilestoneScope() && this._getTimeBoxRecord() === null){
               this.on('ready', this._update, this);
            }

            Rally.data.ModelFactory.getModel({
                type: 'Defect',
                success: function(defectModel) {

                    var promises = [
                        Rally.technicalservices.Utilities.fetchScheduleStates(),
                        Rally.technicalservices.Utilities.fetchPortfolioTypes(),
                        Rally.technicalservices.Utilities.fetchAllowedValues(defectModel,'State'),
                        Rally.technicalservices.Utilities.fetchAllowedValues(defectModel,'Resolution')
                    ];

                    Deft.Promise.all(promises).then({
                        scope: this,
                        success: function(results){
                            this.logger.log('results',results);
                            this.sModelNames = Ext.Array.map(results[1], function(r){ return r.get('TypePath'); })//Ext.Array.from(_.first(results[1]).get('TypePath'));
                            this.scheduleStates = results[0];
                            this.defectStates = results[2];
                            this.defectResolutions = results[3];

                            this._addComponents();
                        },
                        failure: function(msg){
                            Rally.ui.notify.Notifier.showError({message: msg});
                        }
                    });
                },
                scope: this
            });
        },
        _addComponents: function(){
            this.logger.log('_addComponents');
            this.down('#selection_box').removeAll();
            this.down('#banner_box').removeAll();
            this.down('#grid_box').removeAll();
            if (this.down('rallygridboard')){
                this.down('rallygridboard').destroy();
            }

            var filters = Ext.create('Rally.data.wsapi.Filter',{
                property: 'Projects',
                operator: 'contains',
                value: this.getContext().getProject()._ref
            });
            filters = filters.or({
                property: 'TargetProject',
                value: null
            });

            this.logger.log('filters', filters.toString());
            if (!this._hasMilestoneScope()){
              var cb = this.down('#selection_box').add({
                  xtype: 'rallymilestonecombobox',
                  stateful: true,
                  stateId: this.getContext().getScopedStateId('milestone-cb'),
                  emptyText: 'Select a Milestone...',
                  storeConfig: {
                      filters: filters,
                      remoteFilter: true,
                      limit: 'Infinity',
                      pageSize: 200
                  }
              });
              cb.on('select', this._update, this);
              cb.on('ready', this._update, this);
            }

            var tpl = new Ext.XTemplate('<div class="selector-msg"><tpl if="days &gt;= 0">Target Date: {targetDate} ({days} days remaining)',
                '<tpl elseif="days &lt; 0">Target Date: {targetDate} <span style="color:red;">({days*(-1)} days past)</span>',
                '<tpl elseif="message"><span style="color:#888888;">{message}</span>',
                '<tpl else><span style="color:red;">No target date set for milestone</span></tpl></div>'
              );

            this.down('#selection_box').add({
                xtype: 'container',
                itemId: 'remaining-days',
                flex: 1,
                tpl: tpl
            });

            var lt_tpl = new Ext.XTemplate('<tpl if="latestories &gt; 0"><div class="picto icon-warning warning" style="color:#FAD200;font-size:16px;"></div>',
                '<div class="latestories">{latestories} Late Stories</div></tpl>')

            this.down('#selection_box').add({
                xtype: 'container',
                itemId: 'late-stories',
                flex: 1,
                style: {
                    textAlign: 'right',
                    cursor: 'pointer'
                },
                tpl: lt_tpl,
                listeners: {
                    scope: this,
                    afterrender: function(cmp){
                        cmp.getEl().on('click', this._showLateStoriesPopover, this);
                    }
                }
            });

            if (this._hasMilestoneScope()){
               this._update();
            }
        },

        _showLateStoriesPopover: function(event, target){
            this.logger.log('_showLateStoriesPopover',  target);

            if (this.lateStories && this.lateStories.length > 0){

                var html = _.map(this.lateStories, function(s){ return Ext.String.format('<li>{0}: {1} ({2})', s.get('FormattedID'), s.get('Name'), s.get('Iteration') && s.get('Iteration').Name || "Unscheduled")});
                html = Ext.String.format('<ul>{0}</ul>',html);

                html += "<br/><i>Late Stories are work items that are scheduled into an iteration that ends after the Milestone target date or items that are not scheduled into an iteration.</i>" ;

                var tt = Ext.create('Rally.ui.tooltip.ToolTip', {
                    target : target,
                    html: html,
                    destroyAfterHide: true
                });
                tt.show();
            }
        },
        _update: function(){

            this.down('#banner_box').removeAll();
            this.down('#grid_box').removeAll();
            if (this.down('rallygridboard')){
                this.down('rallygridboard').destroy();
            }

            var rec = this._getTimeBoxRecord();
            this.logger.log('_update', rec);
            if (!rec){
               this.down('#remaining-days').update({message: "No Milestone selected."});
                return;
            }

            var targetDate = Rally.util.DateTime.fromIsoString(rec.get('TargetDate')),
                days = Rally.util.DateTime.getDifference(targetDate,new Date(), 'day'),
                formattedTargetDate = Rally.util.DateTime.formatWithDefault(targetDate);
            this.down('#remaining-days').update({days: days, targetDate: formattedTargetDate});

            this._getGridStore().then({
                success: this._addGridBoard,
                scope: this
            });
        },
        _getModelNames: function () {
            this.logger.log('_getModelNames',this.sModelNames);
            return this.sModelNames.concat(['HierarchicalRequirement','Defect','TestCase','TestSet']);
          //  return ['HierarchicalRequirement','Defect','TestSet','TestCase'];
        },

        getSettingsFields: function () {
            var settings = this.getSettings(),
                states = this.defectStates || [],
                defectResolutions = this.defectResolutions || [],
                fields = [],
                labelWidth = 200,
                width= 600;

            this.logger.log('getSettingsFields', states, defectResolutions, settings);

            var closedStates = settings && settings.closedDefectStates;
            if (closedStates && Ext.isString(closedStates)){
                closedStates = closedStates.split(',');
            }
            var stateOptions = _.map(states, function(s){
                var checked = Ext.Array.contains(closedStates, s);
                 return { boxLabel: s, name: 'closedDefectStates', inputValue: s, checked: checked };
            });

            var resolvedValues = settings && settings.resolvedDefectValues || [];
            if (resolvedValues && Ext.isString(resolvedValues)){
                resolvedValues = resolvedValues.split(',');
            }
            var resolvedOptions = _.map(defectResolutions, function(r){
                var checked = Ext.Array.contains(resolvedValues, r);
                return { boxLabel: r, name: 'resolvedDefectValues', inputValue: r, checked: checked };
            });

            fields.push({
               name: 'defaultColumns',
               xtype: 'rallyfieldpicker',
               fieldLabel: 'Default Fields',
               labelWidth: labelWidth,
               labelAlign: 'right',
               modelTypes: this._getModelNames(),
               autoExpand: true,
               width: 500
            });

            fields.push({
                xtype: 'checkboxgroup',
                fieldLabel: 'Closed Defect States',
                labelWidth: labelWidth,
                width: width,
                labelAlign: 'right',
                columns: 2,
                vertical: true,
                margin: '15 0 15 0',
                items: stateOptions
            });

            fields.push({
                xtype: 'checkboxgroup',
                fieldLabel: 'Exclude Defects with Resolution',
                labelWidth: labelWidth,
                width: width,
                labelAlign: 'right',
                columns: 2,
                vertical: true,
                margin: '15 0 15 0',
                items: resolvedOptions
            });

            fields.push({
                name: 'uatTestCaseType',
                xtype: 'rallyfieldvaluecombobox',
                fieldLabel: 'UAT Test Type',
                labelWidth: labelWidth,
                labelAlign: 'right',
                model: 'TestCase',
                field: 'Type',
                listeners: {
                    ready: function(cb){
                        cb.setValue(settings.uatTestCaseType);
                    }
                }
            });

            fields.push({
                name: 'displayTestCaseResultAttachments',
                xtype: 'rallycheckboxfield',
                labelWidth: labelWidth,
                labelAlign: 'right',
                fieldLabel: 'Show TestCaseResult Attachments'
            });

            fields.push({
              name: 'showStatsBanner',
              xtype: 'rallycheckboxfield',
              fieldLabel: 'Show Stats Banner',
              labelWidth: labelWidth,
              labelAlign: 'right'
            });


            return fields;
        },
        _getTCRFilters: function(){
            var filters = [];
            if (this._getTimeBoxRecord()){
                var milestone = this._getTimeBoxRecord();
                filters = Ext.create('Rally.data.wsapi.Filter',{
                  property: 'TestCase.WorkProduct.Milestones.ObjectID',
                  value:  milestone.get('ObjectID')
                });
                // filters =  Rally.data.wsapi.Filter.or([{
                //     property: 'TestCase.Milestones.ObjectID',
                //     value:  milestone.get('ObjectID')
                // },{
                //     property: 'TestCase.WorkProduct.Milestones.ObjectID',
                //     value:  milestone.get('ObjectID')
                // }]);
            }
            this.logger.log('_getTCRFilters', filters.toString());
            return filters;
        },
        _getTCRFilters2: function(testCases){
            var filters = Ext.Array.map(testCases, function(tc){
               return {
                  property: 'TestCase.ObjectID',
                  value: tc.get('ObjectID')
               };
            });

            if (filters.length > 1){
              filters = Rally.data.wsapi.Filter.or(filters);
            }
            this.logger.log('_getFilters', filters.toString());
            return filters;
        },
        _getFilters: function(){
            var filters = [];
            if (this._getTimeBoxRecord()){
                var milestone = this._getTimeBoxRecord();
                var milestoneRef = Rally.util.Ref.getRelativeUri(milestone.get('_ref'));
                filters =  Rally.data.wsapi.Filter.or([{
                    property: "Milestones",
                    value: milestoneRef
                },{
                    property: 'Requirement.Milestones',
                    value:  milestoneRef
                },{
                    property: 'WorkProduct.Milestones',
                    value:  milestoneRef
                }]);
            }
            this.logger.log('_getFilters', filters.toString());
            return filters;
        },
        _getTestCaseFilters: function(){
          var filters = [];
          if (this._getTimeBoxRecord()){
              var milestone = this._getTimeBoxRecord();
              filters = Ext.create('Rally.data.wsapi.Filter',{
                     property: 'WorkProduct.Milestones.ObjectID',
                     value:  milestone.get('ObjectID')
              });
              // filters =  Rally.data.wsapi.Filter.or([{
              //     property: "Milestones.ObjectID",
              //     value: milestone.get('ObjectID')
              // },{
              //     property: 'WorkProduct.Milestones.ObjectID',
              //     value:  milestone.get('ObjectID')
              //   }]);
             }

              this.logger.log('_getTestCaseFilters', filters.toString());
              return filters;
        },
        _getMilestoneRef: function(){
            var rec = this._getTimeBoxRecord();
            if (rec){
                return rec.get('_ref');
            }
            return null;
        },

        _getTimeBoxRecord: function(){
            if (this.down('rallymilestonecombobox') && this.down('rallymilestonecombobox').getRecord()){
                return this.down('rallymilestonecombobox').getRecord();
            }
            this.logger.log('_getTimeboxRecord', this.getContext().getTimeboxScope());
            if (this._hasMilestoneScope()){
               return this.getContext().getTimeboxScope().getRecord() || null;
            }
            return null;
        },
        _hasMilestoneScope: function(){
          this.logger.log('_hasMilestoneScope', this.getContext().getTimeboxScope());
            if (this.getContext().getTimeboxScope() && this.getContext().getTimeboxScope().type.toLowerCase() === 'milestone'){
               return true;
            }
            return false;
        },
        onTimeboxScopeChange: function(timeboxScope) {
            if(timeboxScope && timeboxScope.getType().toLowerCase() === 'milestone') {
                this.callParent(arguments);
                this._update();
            }
        },
        _getGridStore: function() {
          this.logger.log('_getGridStore', this._getModelNames().length);
            var config = {
                    models: this._getModelNames(),
                    autoLoad: false,
                    remoteSort: true,
                    root: {expanded: true},
                    enableHierarchy: true,
                    context: {project: null}
                };
            this.logger.log('_getGridStore', config);
            config.filters = this._getFilters();
            this.testCaseResults = null;  //clear this out so that we populate it correctly....

            return Ext.create('Rally.data.wsapi.TreeStoreBuilder').build(config).then({
                success: function (store) {
                    store.on('load', this._loadAttachmentInformation, this);
                    return store;
                },
                scope: this
            });
        },
        getDisplayTestCaseResultAttachments: function(){
            return this.getSetting('displayTestCaseResultAttachments') === 'true' ||
                this.getSetting('displayTestCaseResultAttachments') === true;
        },
        _updateTestCases: function(testCaseResults, testCases){

            if (!testCaseResults){
                return;
            }

            var displayTestCaseResultAttachments = this.getDisplayTestCaseResultAttachments(),
                milestoneTargetDate = Rally.util.DateTime.fromIsoString(this._getTimeBoxRecord().get('TargetDate'));

            this.logger.log('_updateTestCases',displayTestCaseResultAttachments, milestoneTargetDate, testCaseResults.length, testCases.length);

            _.each(testCases, function(tc){
                var results = _.filter(testCaseResults, function(tcr){ return tcr.get('TestCase').ObjectID === tc.get('ObjectID'); }),
                    resultsWithAttachments = _.filter(results, function(r){ return (r.get('Attachments') && r.get('Attachments').Count > 0) || 0; });
                tc.set('_showAttachments',displayTestCaseResultAttachments);
                tc.set('resultsTotal',results.length);
                tc.set('resultsWithAttachments',resultsWithAttachments.length);
                tc.set('_milestoneTargetDate', milestoneTargetDate);
            });
        },
        _onLoad: function (grid) {

            this.logger.log('_onLoad customFilter', grid.currentCustomFilter);
            if (this.down('statsbanner')){
                this.down('statsbanner').updateFilters(grid.currentCustomFilter)
            } else {
                this._addStatsBanner(grid.currentCustomFilter);
            }
        },
        _loadAttachmentInformation: function(store, node, records){
            this.logger.log('_loadAttachmentInformation', store , records);

            if (!records || records.length === 0 ){
                return;
            }
            var testCases = _.filter(records, function(r){ return r.get('_type') === 'testcase'; });
            this.logger.log('_loadAttachmentInformation testCases', testCases.length);

            if (!testCases || testCases.length == 0){
                return;
            }

            if (this.testCaseResults){
                this._updateTestCases(this.testCaseResults, testCases);
            } else {
                this.setLoading(true);
                Rally.technicalservices.Utilities.fetchWsapiRecords('TestCase',this._getTestCaseFilters(),['ObjectID']).then({
                    success: function(testCases){
                      Rally.technicalservices.Utilities.fetchWsapiRecords('TestCaseResult',this._getTCRFilters2(testCases),['ObjectID', 'TestCase','WorkProduct','FormattedID','Attachments','TestSet']).then({
                          success: function(testCaseResults){
                              this.logger.log('_loadAttachmentsInformation load success', testCaseResults);
                              this.testCaseResults = testCaseResults;
                              this._updateTestCases(testCaseResults, testCases);
                              this.getStatsBanner() && this.getStatsBanner().addTestCaseResults(testCaseResults);
                          },
                          failure: function(msg){
                              Rally.ui.notify.Notifier.showError({message: "Error loading Test Case Result Attachment Information:  " + msg});
                              this.logger.log('_loadAttachmentsInformation load error', msg)
                          },
                          scope: this
                      }).always(function(){
                          this.setLoading(false);
                      },this);

                    },
                    failure: function(msg){
                      Rally.ui.notify.Notifier.showError({message: "Error loading ALL Test Cases for Milestone:  " + msg});
                      this.logger.log('_loadAttachmentsInformation load error', msg);
                      this.setLoading(false);
                    },
                    scope: this
                });

                // Rally.technicalservices.Utilities.fetchWsapiRecords('TestCaseResult',this._getTCRFilters(),['ObjectID', 'TestCase','WorkProduct','FormattedID','Attachments','TestSet']).then({
                //     success: function(testCaseResults){
                //         this.logger.log('_loadAttachmentsInformation load success', testCaseResults);
                //         this.testCaseResults = testCaseResults;
                //         this._updateTestCases(testCaseResults, testCases);
                //         this.getStatsBanner() && this.getStatsBanner().addTestCaseResults(testCaseResults);
                //     },
                //     failure: function(msg){
                //         Rally.ui.notify.Notifier.showError({message: "Error loading Test Case Result Attachment Information:  " + msg});
                //         this.logger.log('_loadAttachmentsInformation load error', msg)
                //     },
                //     scope: this
                // }).always(function(){
                //     this.setLoading(false);
                // },this);
            }

        },
        _updateLateStories: function(latestories){
            this.logger.log('_updateLateStories', latestories);
            this.down('#late-stories').update({latestories: latestories.length});
            this.lateStories = latestories;
        },
        getStatsBanner: function(){
            return this.down('statsbanner');
        },
        _addStatsBanner: function(customFilters) {

            if (!this.getSetting('showStatsBanner')){
               return;
            }
            var closedDefectStates = this.getSetting('closedDefectStates') || [],
                resolvedDefectStates = this.getSetting('resolvedDefectValues')|| [],
                uatTestTypes = [this.getSetting('uatTestCaseType')];

            this.logger.log('_addStatsBanner', closedDefectStates, resolvedDefectStates, uatTestTypes, this.testCaseResults);
            if (Ext.isString(closedDefectStates)){
                closedDefectStates = closedDefectStates.split(',');
            }

            if (Ext.isString(resolvedDefectStates)){
                resolvedDefectStates = resolvedDefectStates.split(',');
            }
            this.logger.log('_addStatsBanner', closedDefectStates, resolvedDefectStates);
            this.remove('statsBanner');
            var statsBanner = this.down('#banner_box').add({
                xtype: 'statsbanner',
                itemId: 'statsBanner',
                scheduleStates: this.scheduleStates,
                context: this.getContext(),
                timeboxRecord: this._getTimeBoxRecord(),
                timeboxEndDateField: 'TargetDate',
                filters: this._getFilters(),
                customFilters: customFilters,
                closedDefectStates: closedDefectStates,
                resolvedDefectValues: resolvedDefectStates,
                uatTestCaseType: uatTestTypes,
                expanded: this.getSetting('collapseStatsBanner') !== true,
                margin: '0 0 5px 0',
                listeners: {
                    resize: this._resizeGridBoardToFillSpace,
                    scope: this,
                    latestoriesfound: this._updateLateStories
                }
            });
            if (this.testCaseResults){
                statsBanner.addTestCaseResults(this.testCaseResults);
            }

        },

        _addGridBoard: function (gridStore) {
            var context = this.getContext();

            this.logger.log('_addGridboard', context);
            this.gridboard = this.add({
                itemId: 'gridBoard',
                xtype: 'rallygridboard',
                stateId: 'portfoliotracking-gridboard',
                context: context,
                plugins: this._getGridBoardPlugins(),
                modelNames: this._getModelNames(),
                gridConfig: this._getGridConfig(gridStore),

                addNewPluginConfig: {
                    style: {
                        'float': 'left',
                        'margin-right': '5px'
                    }
                },
                listeners: {
                    load: this._onLoad,
                    afterrender : function() {
                        this.setWidth(this.getWidth()+1);
                    },
                    scope: this
                },
                height: Math.max(this.getAvailableGridBoardHeight()-50, 150)
            });
        },

        /**
         * @private
         */
        getAvailableGridBoardHeight: function() {
            var height = this.getHeight();
            if(this.down('#statsBanner') && this.down('#statsBanner').rendered) {
                height -= this.down('#statsBanner').getHeight();
            }
            return height;
        },

        _getGridBoardPlugins: function() {
            var plugins = ['rallygridboardaddnew'],
                context = this.getContext();

            var alwaysSelectedValues = ['FormattedID', 'Name', 'Owner'];
            if (context.getWorkspace().WorkspaceConfiguration.DragDropRankingEnabled) {
                alwaysSelectedValues.push('DragAndDropRank');
            }

            plugins.push({
                  ptype: 'rallygridboardinlinefiltercontrol',
                 inlineFilterButtonConfig: {
                     modelNames: this._getModelNames(),
                     inlineFilterPanelConfig: {
                         collapsed: true,
                         quickFilterPanelConfig: {
                             defaultFields: ['ArtifactSearch','ModelType']
                         }
                     }
                 }
            });

            plugins.push({
                ptype: 'rallygridboardfieldpicker',
               headerPosition: 'left',
               modelNames: this._getModelNames(),
               stateful: true,
               stateId: context.getScopedStateId('milestone-columns')
            });

            // plugins.push({
            //     ptype: 'rallygridboardcustomfiltercontrol',
            //     filterControlConfig: {
            //         modelNames: this._getModelNames(),
            //         stateful: true,
            //         stateId: context.getScopedStateId('tracking-filters')
            //     },
            //     showOwnerFilter: true,
            //     ownerFilterControlConfig: {
            //         stateful: true,
            //         stateId: context.getScopedStateId('tracking-owner-filter')
            //     }
            // });

            plugins.push({
                ptype: 'rallygridboardactionsmenu',
                menuItems: [
                    {
                        text: 'Export...',
                        handler: function() {
                            window.location = Rally.ui.gridboard.Export.buildCsvExportUrl(
                                this.down('rallygridboard').getGridOrBoard());
                        },
                        scope: this
                    }
                ],
                buttonConfig: {
                    iconCls: 'icon-export'
                }
            });

            return plugins;
        },

        setHeight: Ext.Function.createBuffered(function() {
            this.superclass.setHeight.apply(this, arguments);
            this._resizeGridBoardToFillSpace();
        }, 100),

        _resizeGridBoardToFillSpace: function() {
            if(this.gridboard) {
                this.gridboard.setHeight(this.getAvailableGridBoardHeight());
            }
        },

        // _getCustomViewConfig: function() {
        //     var customViewConfig = {
        //         ptype: 'rallygridboardcustomview',
        //         stateId: 'iteration-tracking-board-app',
        //
        //         defaultGridViews: [{
        //             model: ['UserStory', 'Defect', 'DefectSuite'],
        //             name: 'Defect Status',
        //             state: {
        //                 cmpState: {
        //                     expandAfterApply: true,
        //                     columns: [
        //                         'Name',
        //                         'State',
        //                         'Discussion',
        //                         'Priority',
        //                         'Severity',
        //                         'FoundIn',
        //                         'FixedIn',
        //                         'Owner'
        //                     ]
        //                 },
        //                 filterState: {
        //                     filter: {
        //                         defectstatusview: {
        //                             isActiveFilter: false,
        //                             itemId: 'defectstatusview',
        //                             queryString: '((Defects.ObjectID != null) OR (Priority != null))'
        //                         }
        //                     }
        //                 }
        //             }
        //         }, {
        //             model: ['UserStory', 'Defect', 'TestSet', 'DefectSuite'],
        //             name: 'Task Status',
        //             state: {
        //                 cmpState: {
        //                     expandAfterApply: true,
        //                     columns: [
        //                         'Name',
        //                         'State',
        //                         'PlanEstimate',
        //                         'TaskEstimate',
        //                         'ToDo',
        //                         'Discussions',
        //                         'Owner'
        //                     ]
        //                 },
        //                 filterState: {
        //                     filter: {
        //                         taskstatusview: {
        //                             isActiveFilter: false,
        //                             itemId: 'taskstatusview',
        //                             queryString: '(Tasks.ObjectID != null)'
        //                         }
        //                     }
        //                 }
        //             }
        //         }, {
        //             model: ['UserStory', 'Defect', 'TestSet'],
        //             name: 'Test Status',
        //             state: {
        //                 cmpState: {
        //                     expandAfterApply: true,
        //                     columns: [
        //                         'Name',
        //                         'State',
        //                         'Discussions',
        //                         'LastVerdict',
        //                         'LastBuild',
        //                         'LastRun',
        //                         'ActiveDefects',
        //                         'Priority',
        //                         'Owner'
        //                     ]
        //                 },
        //                 filterState: {
        //                     filter: {
        //                         teststatusview: {
        //                             isActiveFilter: false,
        //                             itemId: 'teststatusview',
        //                             queryString: '(TestCases.ObjectID != null)'
        //                         }
        //                     }
        //                 }
        //             }
        //         }]
        //     };
        //
        //     customViewConfig.defaultBoardViews = _.cloneDeep(customViewConfig.defaultGridViews);
        //     _.each(customViewConfig.defaultBoardViews, function(view) {
        //         delete view.state.cmpState;
        //     });
        //
        //     return customViewConfig;
        // },

        // _createOwnerFilterItem: function (context) {
        //     var isPillPickerEnabled = context.isFeatureEnabled('BETA_TRACKING_EXPERIENCE'),
        //         projectRef = context.getProjectRef();
        //
        //     if (isPillPickerEnabled) {
        //         return {
        //             xtype: 'rallyownerpillfilter',
        //             margin: '-15 0 5 0',
        //             filterChildren: this.getContext().isFeatureEnabled('S58650_ALLOW_WSAPI_TRAVERSAL_FILTER_FOR_MULTIPLE_TYPES'),
        //             project: projectRef,
        //             showPills: false,
        //             showClear: true
        //         };
        //     } else {
        //         return {
        //             xtype: 'rallyownerfilter',
        //             margin: '5 0 5 0',
        //             filterChildren: this.getContext().isFeatureEnabled('S58650_ALLOW_WSAPI_TRAVERSAL_FILTER_FOR_MULTIPLE_TYPES'),
        //             project: projectRef
        //         };
        //     }
        //
        // },

        // _createTagFilterItem: function (context) {
        //     var filterUiImprovementsToggleEnabled = context.isFeatureEnabled('BETA_TRACKING_EXPERIENCE');
        //     return {
        //         xtype: 'rallytagpillfilter',
        //         margin: filterUiImprovementsToggleEnabled ? '-15 0 5 0' : '5 0 5 0',
        //         showPills: filterUiImprovementsToggleEnabled,
        //         showClear: filterUiImprovementsToggleEnabled,
        //         remoteFilter: filterUiImprovementsToggleEnabled
        //     };
        // },

        // _createModelFilterItem: function (context) {
        //     return {
        //         xtype: 'rallymodelfilter',
        //         models: this._getModelNames(),
        //         context: context
        //     };
        // },
        _getDefaultColumns: function(){
           var cols = this.getSetting('defaultColumns');
           if (!Ext.isArray(cols)){
              cols = cols.split(',');
           }
           if (cols.length === 0){
              cols.push('Name');
           }
           return cols;
        },
        _getGridConfig: function (gridStore) {
            var context = this.getContext(),
                stateString = 'milestone-tracking',
                stateId = context.getScopedStateId(stateString);
            this.logger.log('_getGridConfig', this._getDefaultColumns());
            var gridConfig = {
                store: gridStore,
                columnCfgs: this._getDefaultColumns(), //must set this to null to offset default behaviors in the gridboard
                defaultColumnCfgs: this._getGridColumns(),
                plugins: [],
                stateId: stateId,
                storeConfig: {
                    filters: this._getFilters(),
                    context: {project: null}
                },
                stateful: true,
                showPagingToolbar: true
            };
            return gridConfig;
        },

        _getSummaryColumnConfig: function () {
            var taskUnitName = this.getContext().getWorkspace().WorkspaceConfiguration.TaskUnitName,
                planEstimateUnitName = this.getContext().getWorkspace().WorkspaceConfiguration.IterationEstimateUnitName;

            return [
                {
                    field: 'AcceptedLeafStoryCount',
                    type: 'sum',
                    units: 'Total'
                },
                {
                    field: 'AcceptedLeafStoryPlanEstimateTotal',
                    type: 'sum',
                    units: planEstimateUnitName
                },
                {
                    field: 'LeafStoryCount',
                    type: 'sum',
                    units: 'Total'
                },
                {
                    field: 'LeafStoryPlanEstimateTotal',
                    type: 'sum',
                    units: planEstimateUnitName
                },
                {
                    field: 'UnEstimatedLeafStoryCount',
                    type: 'sum',
                    units: 'Total'
                }
            ];
        },

        _getGridColumns: function (columns) {

            var result = this._getDefaultColumns();

            if (columns) {
                result = columns;
            }
            _.pull(result, 'FormattedID');

            return result;
        },

        _onBoardFilter: function () {
            this.setLoading(true);
        },

        _onBoardFilterComplete: function () {
            this.setLoading(false);
        },

        getOptions: function() {
            return [
                {
                    text: 'About...',
                    handler: this._launchInfo,
                    scope: this
                }
            ];
        },

        _launchInfo: function() {
            if ( this.about_dialog ) { this.about_dialog.destroy(); }
            this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{
                informationHtml:  "<br/>"
            });
        },

        isExternal: function(){
            return typeof(this.getAppId()) == 'undefined';
        },
        onSettingsUpdate: function(settings){
            Ext.apply(this.settings, settings);
            this.logger.log('onSettingsUpdate',this, settings);
            this._addComponents();
        }
    });
})();

Ext.define('Rally.technicalservices.data.ChunkerStore',{
    MAX_CHUNK_SIZE: 25,
    logger: new Rally.technicalservices.Logger(),
    config: {
        model: null,
        fetch: null,
        chunkField: null,
        chunkOids: null
    },
    records: null,

    constructor: function(config){
        this.initConfig(config);
    },
    load: function(){
        var deferred = Ext.create('Deft.Deferred');
        var oids = this.chunkOids;
        var promises = [];

        if (oids.length > this.MAX_CHUNK_SIZE){
            var start_idx = 0;
            console.log('original array',oids);
            while(start_idx < oids.length){
                var chunk_values = oids.splice(start_idx, this.MAX_CHUNK_SIZE);
                promises.push(this._fetchRecords(chunk_values));
            }
        } else {
            promises.push(this._fetchRecords(oids));
        }

        if (promises.length == 0){
            deferred.resolve();
        }
        Deft.Promise.all(promises).then({
            scope: this,
            success: function(records) {
                var data = _.flatten(records);
                deferred.resolve(data);
            },
            failure: function(operation){
                deferred.resolve([]);
            }
        });
        return deferred;
    },
    _fetchRecords: function(object_ids){
        var deferred = Ext.create('Deft.Deferred');
        var filters = [];
        Ext.each(object_ids, function(oid){
            filters.push({property: this.chunkField, value: oid});
        },this);
        var wsFilters = Rally.data.wsapi.Filter.or(filters);

        Ext.create('Rally.data.wsapi.Store',{
            model: this.model,
            fetch: this.fetch,
            autoLoad: true,
            context: {project: null},
            filters: wsFilters
        }).load({
            callback: function(records, operation, success){
                this.logger.log('chunking success', success);
                if (success){
                    deferred.resolve(records);
                } else {
                    deferred.reject(operation);
                }

            },
            scope: this
        });
        return deferred;
    }
});

(function() {
    var Ext = window.Ext4 || window.Ext;

    /**
     * A ComboBox for choosing a milestone
     *
     *     @example
     *     Ext.create('Ext.Container', {
     *         items: [{
     *             xtype: 'rallymilestonecombobox'
     *          }],
     *          renderTo: Ext.getBody().dom
     *     });
     */
    Ext.define('Rally.ui.combobox.MilestoneComboBox', {
        extend: 'Rally.ui.combobox.ComboBox',
        alias: 'widget.rallymilestonecombobox',
        requires: [
            'Rally.util.DateTime',
            'Rally.data.util.Sorter'
        ],

        mixins: [
            'Rally.ui.MilestoneListHeadings'
        ],

        config: {
            allowNoEntry: false,
            hideLabel: true,
            width: 300,
            storeConfig: {
                autoLoad: true,
                model: Ext.identityFn('milestone'),
                remoteFilter: false,
                remoteSort: false,
                limit: Infinity
            },
            listConfig: {
                minWidth: 385,
                cls: 'milestone-list',
                emptyText: 'No Milestones Defined'
            },
            tpl: Ext.create('Ext.XTemplate',
                '<tpl for=".">',
                '<div class="' + Ext.baseCSSPrefix + 'boundlist-item">' +
                '<div class="milestone-name"><b>{[values.FormattedID]}</b>:  {[values._refObjectName]}</div>',
                '<div class="milestone-date">{[Rally.util.DateTime.formatWithDefault(values.TargetDate)]}</div>',
                '<div class="milestone-raw-date">{[values.TargetDate]}</div>',
                '</div>',
                '</tpl>'
            )
        },

        initComponent: function () {
            this.storeConfig.sorters = [{
                sorterFn: Rally.data.util.Sorter.getDefaultSortFn('Milestone')
            }];

            this.callParent(arguments);
        },

        createPicker: function() {
            var picker = this.callParent(arguments);

            picker.on({
                show: this._addListHeaders,
                refresh: this._addListHeaders,
                scope: this,
                filterSelectedNodes: false
            });

            return picker;
        }
    });
})();
/**
 * This needs to be overridden for the _getLeafCount function to workaround what I think is a bug in the API.
 */
var origGetPrototypeBody = Ext.data.NodeInterface.getPrototypeBody;

Ext.override(Rally.ui.grid.data.NodeInterface, {
    extend: 'Ext.data.NodeInterface',

    statics: Ext.apply(Ext.data.NodeInterface.prototype.self, {

        /**
         * @private
         * @property
         */
        noLayoutFields: /^(expanded|loaded|loading|leaf|leafCount)$/,

        getPrototypeBody: function() {
            var protoBody = origGetPrototypeBody(),
                originalDestroy = protoBody.destroy,
                originalReplaceChild = protoBody.replaceChild,
                originalOnChildNodesAvailable = protoBody.onChildNodesAvailable;

            return Ext.apply(protoBody, {
                save: function (options) {
                    options = options || {};
                    options.params = options.params || {};
                    options.params.fetch = options.params.fetch || true;

                    var store = this.store && this.store.treeStore || this.store;
                    if (store && _.isFunction(store.getParentFetch) && _.isFunction(store.getChildFetch)) {
                        var fetchOptions = {
                            node: this,
                            fetch: options.params.fetch
                        };
                        options.params.fetch = this.getDepth() === 1 ?
                            store.getParentFetch(fetchOptions) : store.getChildFetch(fetchOptions);
                    }

                    return this.self.superclass.save.apply(this, [options]);
                },

                set: function (name, value) {
                    var isInTree = Rally.ui.grid.data.NodeInterface.noLayoutFields.test(name) &&  this.store && this.store.ownerTree,
                        tree = this.store && this.store.ownerTree,
                        ret;

                    if (isInTree) {
                        tree.suspendLayouts();
                    }

                    ret = this.callParent(arguments);

                    if (isInTree) {
                        tree.resumeLayouts();
                    }

                    return ret;
                },

                destroy: function(silent) {
                    if (this.parentNode) {
                        this.parentNode.decrementLeafCount();
                    }
                    this._removeChildren();

                    return originalDestroy.apply(this, [silent]);
                },

                replaceChild: function(newChild, oldChild) {
                    oldChild.replacedByNode = newChild;
                    return originalReplaceChild.apply(this, [newChild, oldChild]);
                },

                onChildNodesAvailable: function(records, recursive, callback, scope) {
                    if (!this._isVisible()) {
                        // childNodes came back after expand,
                        // but user has scrolled and this node (the parent) has moved out of the view.
                        // cancel expand
                        var view = this._getView();
                        if (view) {
                            view.fireEvent('afternonvisibleitemexpand', this);
                            return;
                        }
                    }

                    return originalOnChildNodesAvailable.apply(this, arguments);
                },

                updateCollectionCount: function(collectionName, count) {
                    var collection = this.get(collectionName);

                    if (collection) {
                        collection.Count = count;
                    }

                    this.set('dirtyCollection', true);
                },

                incrementLeafCount: function() {
                    this.set('leafCount', (this.get('leafCount') || 0) + 1);
                    this.set('leaf', false);
                },

                decrementLeafCount: function() {
                    this.set('leafCount', (this.get('leafCount') || 1) - 1);

                    if (this.get('leafCount') > 1) {
                        this.set('leaf', true);
                    }
                },

                resetLeafCount: function(enableHierarchy, expandedCollectionNames) {
                    if (enableHierarchy) {
                        var leafCount = this._getLeafCount(expandedCollectionNames);
                        this.set('leaf', leafCount < 1);
                        this.set('leafCount', leafCount);
                    } else {
                        this.set('leaf', true);
                        this.set('leafCount', 0);
                    }
                },

                _isVisible: function() {
                    var store = this.store;

                    if (store && _.isFunction(store.isRootNode)) {
                        return store.isRootNode(this) || this._getViewNode();
                    }

                    return true;
                },

                _getView: function() {
                    var grid = this.store && this.store.ownerTree;

                    return grid && grid.getView();
                },

                _getViewNode: function() {
                    var view = this._getView();

                    return view && view.getNode(this);
                },

                _getLeafCount: function(expandedCollectionNames) {
                    var typePath = this.get('_type').toLowerCase(),
                        collectionNames = Ext.Array.from(expandedCollectionNames[typePath] || []);

                    var count =  _.reduce(collectionNames, function(accumulator, collectionName) {
                        var collectionVal = this.get(collectionName);
                        if (collectionVal && collectionVal.Count) {
                            accumulator += collectionVal.Count;
                        }

                        return accumulator;
                    }, 0, this);

                    if (count === 0 && this.get('DirectChildrenCount') > 0){
                        return this.get('DirectChildrenCount');
                    }
                    return count;
                },

                _removeChildren: function() {
                    this.suspendEvents(false);
                    _.each(_.clone(this.childNodes), function(node) {
                        node.parentNode.decrementLeafCount();
                        node.parentNode.removeChild(node, false);
                    });
                    this.resumeEvents();
                }
            });
        }
    })
});

Ext.define('Rally.ui.renderer.template.AttachmentTemplate', {
    extend: 'Ext.XTemplate',

    /**
     * @cfg {String}
     * the field name to get the value for
     */
    fieldName: '',

    constructor: function(config) {

        var templateConfig = [
            '{[values["' + config.fieldName + '"].Count]}',
            config
        ];

        if (config.fieldName === 'Attachments'){
           return this.callParent(['<tpl>',
               '<div aria-label="{[this._getTooltipText(values)]}" title="{[this._getTooltipText(values)]}">',
               '<span class="discussion-cnt">{[this._getColumnText(values)]}</span>',
               '</div>',
               '</tpl>']);
        }
        return this.callParent(templateConfig);
    },
    _getTooltipText: function(recordData){

        var attachments = recordData["Attachments"] && recordData["Attachments"].Count || 0,
            resultsWithAttachments = recordData["resultsWithAttachments"] || 0,
            resultsTotal = recordData["resultsTotal"] || 0,
            showAttachments = recordData["_showAttachments"];

        if (showAttachments){
            return Ext.String.format("There are {0} Attachments on the TestCase.  {1} of {2} TestCaseResults have attachments.",
                attachments, resultsWithAttachments, resultsTotal);

        } else {
            return "";
        }
    },
    _getColumnText: function(recordData){
        var resultsWithAttachments = recordData["resultsWithAttachments"] || 0,
            resultsTotal = recordData["resultsTotal"] || 0,
            showAttachments = recordData["_showAttachments"];

        if (showAttachments){
            return Ext.String.format("{0}/{1}", resultsWithAttachments, resultsTotal);
        }
        return recordData.Attachments && recordData.Attachments.Count || 0;
    }
});

Ext.define('Rally.ui.renderer.template.LastVerdictTemplate', {
    extend: 'Ext.XTemplate',

    /**
     * @cfg {String}
     * the field name to get the value for
     */
    fieldName: '',

    constructor: function(config) {
        Ext.QuickTips.init();
        var templateConfig = [
            '{[this._getLastVerdict(values)]}',
            config
        ];
        return this.callParent(templateConfig);
    },
    _getLastVerdict: function(recordData){
       var warnings = [];

        if (recordData.resultsTotal !== recordData.resultsWithAttachments){
           warnings.push("<li>Not all Test Case Results have Attachments.");
       }

       if (recordData.LastRun > recordData._milestoneTargetDate){
           warnings.push("<li>Last Verdict ran after Milestone Target Date.");
       }

       var lastVerdict = recordData.LastVerdict;
       if (warnings.length > 0){
           var qtip = recordData.FormattedID + " not executed because:<br/><br/>" + warnings.join('<br/>');
           lastVerdict += '<div class="picto icon-warning warning" data-qtip="' + qtip + '" style="color:#FAD200;font-size:16px;margin:10px"></div>';
       }

       return lastVerdict;
   }
});


Ext.override(Rally.ui.renderer.RendererFactory,{
    typeFieldTemplates: {
        testcase: {
            attachments: function(field){
                return Ext.create('Rally.ui.renderer.template.AttachmentTemplate',{
                    fieldName: field.name
                });
            },
            lastverdict: function(field){
                return Ext.create('Rally.ui.renderer.template.LastVerdictTemplate',{
                    fieldName: field.name
                });
            }
        },
        milestone: {
            formattedid: function(field) {
                var renderIdAsText = true;
                var context = Rally.environment.getContext();
                if (context) {
                    var featureEnabledFnName = 'is' + 'FeatureEnabled';
                    if (_.isFunction(context[featureEnabledFnName]) && context[featureEnabledFnName]('EDP_MILESTONE_BETA')) {
                        renderIdAsText = false;
                    }
                }
                return Ext.create('Rally.ui.renderer.template.FormattedIDTemplate', {
                    renderIdAsText: renderIdAsText
                });
            }
        },
        task: {
            state: function(field) {
                return Ext.create('Rally.ui.renderer.template.ScheduleStateTemplate', {
                    field: field,
                    showTrigger: true
                });
            }
        }
    }
});

Ext.override(Rally.ui.combobox.FieldValueComboBox,{

    _loadStoreValues: function() {
            this.field.getAllowedValueStore().load({
                requester: this,
                callback: function (records, operation, success) {
                    var store = this.store;
                    if (!store) {
                        return;
                    }
                    var noEntryValues = [],
                        labelValues = _.map(
                            _.filter(records, this._hasStringValue),
                            this._convertAllowedValueToLabelValuePair,
                            this
                        );

                    if (this.field.getType() === 'boolean') {
                        labelValues = labelValues.concat([
                            this._convertToLabelValuePair('Yes', true),
                            this._convertToLabelValuePair('No', false)
                        ]);
                    } else if (this.field.required === false) {
                        var name = "-- No Entry --",
                            value = "";
                        if (this.getUseNullForNoEntryValue()) {
                            value = null;
                        }
                        if (this.field.attributeDefinition.AttributeType.toLowerCase() === 'rating') {
                            name = this.getRatingNoEntryString();
                            value = "None";
                        }
                        noEntryValues.push(this._convertToLabelValuePair(name, value));
                    }

                    store.loadRawData(noEntryValues.concat(labelValues));
                    store.fireEvent('load', store, store.getRange(), success);
                    this.onReady();
                },
                scope: this
            });
    }
});

Ext.override(Rally.ui.grid.FieldColumnFactory, {
    Attachments: function() {
        return {
            sortable: true,
            sortType: function(o1){
                console.log('Attachement sorterFn', o1)
                return 'a';
            }
        };
    },
        _blackListedFields: {
            task: [
//                'Attachments',
                'BuildDefinitions',
                'Changesets',
                'ObjectID',
                'ObjectUUID',
                'RevisionHistory',
                'SchemaVersion',
                'Subscription',
                'TaskIndex',
                'VersionId',
                'Workspace'
            ],

            defaultBlackList: [
                'Actuals',
  //              'Attachments',
                'Blocker',
                'BuildDefinitions',
                'Changesets',
                'Children',
                'ClosedDefectCount',
                'Editors',
                'GrossEstimateConversionRatio',
                'Iterations',
                'LastResult',
                'LandingPage',
                'ObjectID',
                'ObjectUUID',
                'PassingTestCaseCount',
                'PortfolioItem',
                'Predecessors',
                'Releases',
                'RevisionHistory',
                'ScheduleStatePrefix',
                'SchemaVersion',
                'ShortDisplayName',
                'Subscription',
                'Successors',
                'TaskIndex',
                'TeamMembers',
                'TeamMemberships',
                'TestCaseCount',
                'TotalDefectCount',
                'UserIterationCapacities',
                'UserPermissions',
                'UserProfile',
                'VersionId',
                'Workspace'
            ]
        }

    });

(function() {
    var Ext = window.Ext4 || window.Ext;

    /**
     * shows accepted work units for timebox
     */
    Ext.define('MilestoneTrackingApp.Accepted', {
        extend: 'MilestoneTrackingApp.ConfigurableGauge',
        alias:'widget.statsbanneraccepted',

        config: {
            data: {
                percentage: 0,
                calculatedUnits: 0,
                totalUnits: 0,
                title: "Accepted Points",
                byCount: false
            }
        },
        _getRenderData: function() {

            var total = 0,
                accepted_total = 0,
                byCount = this.byCount,
                acceptedScheduleStates = this.scheduleStates.slice(this.scheduleStates.indexOf('Accepted'));

            Ext.Array.each(this.store.getRange(), function(r) {
                if (r.get('_type').toLowerCase() === 'hierarchicalrequirement'){
                    if (!byCount) {
                        var children = r.get('DirectChildrenCount') || 0; //kmc, we only want to exclude parent user stories when
                        //calculating total plan estimate since that would result in doulbe counts.
                        if (children === 0){
                            total += r.get('PlanEstimate') || 0;
                            if (Ext.Array.contains(acceptedScheduleStates, r.get('ScheduleState'))){
                                accepted_total += r.get('PlanEstimate') || 0;
                            }
                        }
                    } else {  //4/19/2016 we do want to include parent user stories here so that the number matches the test coverage...
                        total++;
                        if (Ext.Array.contains(acceptedScheduleStates, r.get('ScheduleState'))){
                            accepted_total ++;
                        }
                    }
                }

            });

            var pct = total === 0 ? 0 : Math.round(accepted_total / total * 100);

            var data = {
                percentage: pct,
                calculatedUnits: accepted_total,
                totalUnits: total,
                unit: this.unitLabel,
                title: this.title,
                tooltip: this.tooltip || ''
            };
            return data;

        }
    });
})();
(function() {
    var Ext = window.Ext4 || window.Ext;

    /**
     * shows collapse/expand toggle for stats banner
     */
    Ext.define('MilestoneTrackingApp.CollapseExpand', {
        extend: 'MilestoneTrackingApp.BannerWidget',
        alias:'widget.statsbannercollapseexpand',
        requires: [],

        tpl: [
            '<div class="expanded-widget">',
            '<div class="toggle-icon icon-chevron-up"></div>',
            '</div>',
            '<div class="collapsed-widget">',
            '<div class="toggle-icon icon-chevron-down"></div>',
            '</div>'
        ],

        componentCls: 'collapse-expand',

        bubbleEvents: ['collapse', 'expand'],

        afterRender: function() {
            this.callParent(arguments);
            this.getEl().on('click', this._onCollapseExpandClick, this);
            this.fireEvent('ready', this);
        },

        _onCollapseExpandClick: function() {
            if (this.expanded) {
                this.fireEvent('collapse', this);
            } else {
                this.fireEvent('expand', this);
            }
        },

        expand: function() {
            this.callParent(arguments);
            this.doComponentLayout();
        },

        collapse: function() {
            this.callParent(arguments);
            this.doComponentLayout();
        }
    });
})();

(function() {
    var Ext = window.Ext4 || window.Ext;

    /**
     * shows accepted work units for timebox
     */
    Ext.define('MilestoneTrackingApp.Defects', {
        extend: 'MilestoneTrackingApp.ConfigurableGauge',
        alias:'widget.statsbannerdefects',

        config: {
            data: {
                percentage: 0,
                calculatedUnits: 0,
                totalUnits: 0,
                title: 'Active Defects'
            }
        },

        _getRenderData: function() {

            var total = 0,
                closed = 0,
                closedStates = this.closedDefectStates,
                resolvedValues = this.resolvedDefectValues;

            Ext.Array.each(this.store.getRange(), function(r) {
                if (r.get('_type').toLowerCase() === 'defect' && !Ext.Array.contains(resolvedValues, r.get('Resolution'))){
                    if (Ext.Array.contains(closedStates, r.get('State'))){
                        closed++;
                    }
                    total++;
                }
            });

            var pct = total === 0 ? 0 : Math.round(closed / total * 100);

            var data = {
                percentage: pct,
                calculatedUnits: closed,
                totalUnits: total,
                unit: this.unitLabel,
                title: this.title,
                tooltip: this.tooltip
            };
            return data;

        }
    });
})();
(function() {
    var Ext = window.Ext4 || window.Ext;

    /**
     * gauge chart for stats banner
     * abstract class
     */
    Ext.define('MilestoneTrackingApp.Gauge', {
        extend: 'MilestoneTrackingApp.BannerWidget',
        alias:'widget.statsbannergauge',

        requires: [
            'Rally.ui.chart.Chart',
            'Rally.util.Timebox',
            'Rally.util.Colors'
        ],

        config: {
            context: null,
            store: null
        },

        onDataChanged: Ext.emptyFn,
        getChartEl: Ext.emptyFn,
        _getChartConfig: Ext.emptyFn,

        _tzOffsetPromises: {},

        initComponent: function() {
            this.mon(this.store, 'datachanged', this.onDataChanged, this);
            this.callParent(arguments);
        },

        expand: function() {
            this.callParent();
            if (this.chart) {
                this.chart.doLayout();
            } else {
                this._addChart(this._getChartConfig({}));
            }
        },

        onRender: function() {
            this.callParent(arguments);
            if (!this._getTimebox()) {
                this._addEmptyChart();
            }
        },
        _getTimebox: function(){
            if (this.getContext().getTimeboxScope() && this.getContext().getTimeboxScope().getRecord()){
                return this.getContext().getTimeboxScope().getRecord();
            }
            return null;
        },
        _addEmptyChart: function() {
            this._cleanupChart();
            this._addChart({
                chartData: {
                    series: [{
                        data: [
                            {
                                name: '',
                                y: 100,
                                color: Rally.util.Colors.grey1
                            }
                        ]
                    }]
                }
            });
        },

        _cleanupChart: function () {
            if (this.chart) {
                this.chart.destroy();
                delete this.chart;
            }
        },

        onDestroy: function () {
            this._cleanupChart();
            this.callParent(arguments);
        },

        onResize: function() {
            if (this.chart && !this.getEl().up('.stats-banner.collapsed')) {
                this.chart.updateLayout();
            }
            this.callParent(arguments);
        },

        refreshChart: function(chartConfig) {
            Ext.suspendLayouts();
            this._cleanupChart();
            if (this.rendered && this.expanded) {
                this._addChart(chartConfig);
            }
            Ext.resumeLayouts();
            this.fireEvent('ready', this);
        },

        _addChart: function(chartConfig) {
            var height = 62;
            this.chart = Ext.create('Rally.ui.chart.Chart', Ext.apply({
                loadMask: false,
                renderTo: this.getChartEl(),
                cls: 'gauge',
                chartConfig: {
                    chart: {
                        backgroundColor: 'rgba(255, 255, 255, 0.1)',
                        defaultSeriesType: 'pie',
                        height: height,
                        spacingTop: 0,
                        spacingRight: 0,
                        spacingBottom: 0,
                        spacingLeft: 0
                    },
                    plotOptions: {
                        pie: {
                            borderWidth: 0,
                            center: ['50%', '50%'],
                            dataLabels: {
                                enabled: false
                            },
                            size: height - 4,
                            innerSize: height - 14,
                            enableMouseTracking: false, //turns off chart hover, but for tooltips you'll need this on
                            shadow: false
                        }
                    },
                    title: '',
                    tooltip: {
                        enabled: false
                    }
                }
            }, chartConfig));
        },

        getTimeboxData: function() {
            return this._getTZOffset().then({
                success: function (tzOffset) {
                    var timebox = this._getTimebox();
                    if(timebox) {
                        return Rally.util.Timebox.getCounts(
                            timebox.get('ReleaseStartDate'),
                            timebox.get('ReleaseDate'),
                            this.getContext().getWorkspace().WorkspaceConfiguration.WorkDays,
                            tzOffset);
                    } else {
                        return {
                            remaining: 0,
                            workdays: 0
                        };
                    }
                },
                scope: this
            });
        },

        _getTZOffset: function() {
            var projectRef = Rally.util.Ref.getRelativeUri(this.getContext().getProject());
            if (!Ext.isDefined(this._tzOffsetPromises[projectRef])) {
                var deferred = this._tzOffsetPromises[projectRef] = Ext.create('Deft.Deferred');
                Rally.environment.getIoProvider().httpGet({
                    url: Rally.environment.getServer().getWsapiUrl() + '/iteration',
                    params: {
                        includeSchema: true,
                        pagesize:1,
                        fetch: false,
                        project: projectRef
                    },
                    success: function(results) {
                        deferred.resolve((results.Schema.properties.EndDate.format.tzOffset || 0) / 60);
                    },
                    requester: this,
                    scope: this
                });
            }
            return this._tzOffsetPromises[projectRef];
        },

        getAcceptanceData: function () {
            var acceptanceData = {
                accepted: 0,
                total: 0,
                acceptedCount: 0,
                count: 0
            };

            _.each(this.store.getRange(), function (rec) {
                acceptanceData.accepted += rec.get('AcceptedLeafStoryPlanEstimateTotal');
                acceptanceData.total += rec.get('LeafStoryPlanEstimateTotal');
                acceptanceData.acceptedCount += rec.get('AcceptedLeafStoryCount');
                acceptanceData.count += rec.get('LeafStoryCount');
            });

            return Deft.Promise.when(acceptanceData);
        },

        getEstimatedData: function () {
            var acceptanceData = {
                accepted: 0,
                total: 0
            };

            _.each(this.store.getRange(), function (rec) {
                acceptanceData.accepted += rec.get('LeafStoryCount') - rec.get('UnEstimatedLeafStoryCount');
                acceptanceData.total += rec.get('LeafStoryCount');
            });

            return Deft.Promise.when(acceptanceData);
        },

        _getScheduleStates: function () {
            if (this._scheduleStates) {
                return Deft.Promise.when(this._scheduleStates);
            } else {
                return this.store.model.getField('ScheduleState').getAllowedValueStore().load().then({
                    success: function (records) {
                        this._scheduleStates = _.map(records, function (record) {
                            return record.get('StringValue');
                        });
                        return this._scheduleStates;
                    },
                    scope: this,
                    requester: this
                });
            }
        }
    });
})();
(function() {
    var Ext = window.Ext4 || window.Ext;

    Ext.define('MilestoneTrackingApp.popover.LateStories', {
        alias: 'widget.latestoriespopover',
        extend: 'Rally.ui.popover.Popover',

        constructor: function (config) {
            config.items = [
                {
                    xtype: 'rallygrid',
                    model: 'User Story',
                    headerCls: 'leftright-header-text',
                    columnCfgs: ['FormattedID', 'Name', 'Feature', 'PlanEstimate', 'Iteration', 'Release', 'Project', 'Owner'],
                    pagingToolbarCfg: {
                        pageSizes: [5, 10, 15]
                    },
                    store: config.store
                }
            ];

            this.callParent(arguments);
        }
    });
    /**
     * shows defects active for timebox
     */
    Ext.define('MilestoneTrackingApp.LateStories', {
        extend: 'MilestoneTrackingApp.BannerWidget',
        alias:'widget.statsbannerlatestories',
        requires: [],

        config: {
            context: null,
            store: null,
            data: {
                activeCount: 0
            }
        },

        tpl: [
            '<div class="expanded-widget">',
            '<span style="cursor: pointer">',
            '<div class="stat-title">Late Stories</div>',
            '<div class="stat-metric">',
            '<div class="metric-icon icon-story"></div>{activeCount}',
            '<div class="stat-secondary">Late</div>',
            '</span>',
            '</div>',
            '</div>',
            '<div class="collapsed-widget">',
            '<span class="metric-icon icon-story"></span>',
            '<div class="stat-title">Late Stories</div>',
            '<div class="stat-metric">{activeCount}</div>',
            '</div>'
        ],

        initComponent: function() {
            this.mon(this.store, 'datachanged', this.onDataChanged, this);
            this.on('render', function () {
                this.getEl().on('click', function () {
                    this._onClickLateStories();
                }, this);
            }, this);
            this.callParent(arguments);
        },

        onDataChanged: function() {
            this.update(this._getRenderData());
            this.fireEvent('ready', this);
        },

        _getLateStoriesCount: function() {
            var lateStories = 0,
                targetDate = Rally.util.DateTime.fromIsoString(this.timeboxRecord.get(this.timeboxEndDateField));

            _.each(this.store.getRange(), function(record){
                var iteration = record.get('Iteration'),
                    children = record.get('DirectChildrenCount') || 0;
                if (children === 0){
                    if (iteration){
                         if (Rally.util.DateTime.fromIsoString(iteration.EndDate) > targetDate){
                            lateStories++;
                        }
                    } else {
                        lateStories++;
                    }
                }

            }, this);
            return lateStories;
        },

        _getRenderData: function() {
            return {activeCount: this._getLateStoriesCount()};
        },

        //_onClickLateStories: function() {
        //    var record = this.store.getAt(0);
        //    //record = _(this.store.getRange()).filter(function (r) { return r.data.UserStories !== ''; }).first();
        //
        //    var
        //        filters = this._filterPopover(record.data),
        //        target = this.getEl();
        //    //targetSelector = this.targetSelector;
        //    //
        //    var store = Ext.create('Rally.data.wsapi.Store', {
        //        model: 'UserStory',
        //        fetch: ['FormattedID', 'Name', 'Feature', 'Release', 'Iteration', 'Project', 'Owner'],
        //        filters: filters,
        //        autoLoad: true,
        //        pageSize: 5
        //    });
        //
        //    var reloadStoreCallback;
        //    Ext.create('Rally.apps.releasetracking.statsbanner.popover.LateStories', {
        //        target: target,
        //        autoShow: false,
        //        record: record,
        //        //filters: filters,
        //        store: store,
        //        headerTitle: 'User Stories Assigned to Later Iterations',
        //        width: 800
        //    }).show();
        //},
        //
        //_filterPopover: function(record) {
        //    return [
        //        {
        //            property: 'Feature.Release.Name',
        //            operator: '=',
        //            value: record.Release.Name
        //        },
        //        {
        //            property: 'DirectChildrenCount',
        //            operator: '=',
        //            value: 0
        //        },
        //        Rally.data.wsapi.Filter.or([
        //            {
        //                property: 'Iteration.EndDate',
        //                operator: '>',
        //                value: record.Release.ReleaseDate
        //            },
        //            {
        //                property: 'Release.ReleaseDate',
        //                operator: '>',
        //                value: record.Release.ReleaseDate
        //            }
        //        ])
        //    ];
        //}
    });
})();
(function() {
    var Ext = window.Ext4 || window.Ext;

    /**
     * shows accepted work units for timebox
     */
    Ext.define('MilestoneTrackingApp.TestCases', {
        extend: 'MilestoneTrackingApp.ConfigurableGauge',
        alias:'widget.statsbannertestcases',

        config: {
            data: {
                percentage: 0,
                calculatedUnits: 0,
                totalUnits: 0,
                title: 'Test Status'
            }
        },

        initComponent: function() {
            Ext.QuickTips.init();
            this.callParent(arguments);
            this.mon(this.testCaseStore,'datachanged', this.onDataChanged, this);

        },
        _getRenderData: function() {
            var total = 0,
                passed = 0,
                executed = 0,
                failed = 0,
                testCaseTypes = this.testCaseTypes || [],
                workProducts = _.filter(this.store.getRange(), function(r){ return r.get('_type') === 'hierarchicalrequirement'});
console.log("CB 3012", workProducts.length);
                workProducts = _.map(workProducts, function(wp){
//console.log("CB 3014", wp.get('ObjectID'),wp.get('FormattedID'));
                    return wp.get('ObjectID');
                });

                var testCases = _.filter(this.testCaseStore.getRange(), function(tc){
console.log("CB 3019", tc.get('ObjectID'),tc.get('FormattedID'));

										if (tc.get('WorkProduct') === null) {return false;}

//console.log("CB 3023", tc.get('WorkProduct').ObjectID);
                    if (Ext.Array.contains(workProducts, tc.get('WorkProduct').ObjectID) &&
                        (testCaseTypes.length === 0 || Ext.Array.contains(testCaseTypes, tc.get('Type')))){
                        return true;
                    }
                    return false;
                });

            Ext.Array.each(testCases, function(r) {
                var runBeforeMilestoneTarget = r.get('LastRun') &&
                        r.get('_milestoneTargetDate') &&
                    r.get('LastRun') < r.get('_milestoneTargetDate');
                
                if (r.get('_resultsTotal') &&
                        r.get('_resultsTotal') === r.get('_resultsWithAttachments') &&
                        runBeforeMilestoneTarget) {
                    executed++;
                    if (r.get('LastVerdict') === "Pass") {
                        passed++;
                    }
                    if (r.get('LastVerdict') === "Fail"){
                        failed++;
                    }
                }
                total++;
            });

            var data = [{
                    name: 'Total',
                    y: total - executed,
                    color: Rally.util.Colors.grey1
                },{
                    name: 'Others',
                    y: executed - passed - failed,
                    color: "#FAD200"
                },{
                    name: 'Passed',
                    y: passed,
                    color: '#8DC63F'
                },{
                    name: 'Failed',
                    y: failed,
                    color:'#F66349'
            }];

            var pct = total === 0 ? 0 : Math.round(passed / total * 100);
            var data = {
                chartData: data,
                title: this.title,
                unit: this.unitLabel,
                calculatedUnits: executed,
                totalUnits: total,
                percentage: pct,
                secondaryCalculatedUnits: passed,
                secondaryTotalUnits: executed,
                secondaryUnit: "passed",
                tooltip: this.tooltip
            };

            return data;

        }
    });
})();

(function() {
    var Ext = window.Ext4 || window.Ext;

    /**
     * shows accepted work units for timebox
     */
    Ext.define('MilestoneTrackingApp.TestCoverage', {
        extend: 'MilestoneTrackingApp.ConfigurableGauge',
        alias:'widget.statsbannertestcoverage',

        config: {
            data: {
                percentage: 0,
                calculatedUnits: 0,
                totalUnits: 0,
                title: "Test Coverage"
            }
        },

        _getRenderData: function() {

            var total = 0,
                hasTestCases = 0;

            Ext.Array.each(this.store.getRange(), function(r) {
                if (r.get('_type').toLowerCase() === 'hierarchicalrequirement'){
                    var testCases = r.get('TestCases');
                    if (testCases && testCases.Count > 0){
                        hasTestCases++;
                    }
                    total++;
                }

            });

            var pct = total === 0 ? 0 : Math.round(hasTestCases / total * 100);

            var data = {
                percentage: pct,
                calculatedUnits: hasTestCases,
                totalUnits: total,
                unit: this.unitLabel,
                title: this.title,
                tooltip: this.tooltip || ''
            };
            return data;

        }
    });
})();
(function() {
    var Ext = window.Ext4 || window.Ext;

    /**
     * shows days remaining for timebox
     */
    Ext.define('MilestoneTrackingApp.TimeboxEnd', {
        extend: 'MilestoneTrackingApp.ConfigurableGauge',
        alias:'widget.statsbannertimeboxend',

        config: {
            timeboxRecord: null,
            timeboxEndDateField: null,
            data: {
                percentage: 0,
                calculatedUnits: 0,
                totalUnits: 0,
                unitLabel: 'days',
                title: 'Milestone End'
            }
        },

        _getRenderData: function() {

            var end_date = this.timeboxRecord.get(this.timeboxEndDateField),
                today = new Date();

            var total = Rally.util.DateTime.getDifference(end_date, today, 'day');

            var data = {
                percentage: 0,
                calculatedUnits: 0,
                totalUnits: total,
                unit: this.unitLabel,
                title: this.title
            };
            return data;
        }
        //requires: [
        //    'Rally.util.Timebox',
        //    'Rally.util.Colors'
        //],
        //
        //tpl: [
        //    '<div class="expanded-widget">',
        //    '<div class="stat-title">{type} End</div>',
        //    '<div class="stat-metric">',
        //    '<div class="metric-chart"></div>',
        //    '<div class="metric-chart-text">',
        //    '{remaining}',
        //    '</div>',
        //    '<div class="metric-subtext">days left of {workdays}</div>',
        //    '</div>',
        //    '</div>',
        //    '<div class="collapsed-widget">',
        //    '<div class="stat-title">{type} End</div>',
        //    '<div class="stat-metric">{remaining}<span class="stat-metric-secondary"> days</span></div>',
        //    '</div>'
        //],
        //
        //config: {
        //    data: {
        //        type: 'Release',
        //        remaining: 0,
        //        workdays: 0
        //    }
        //},
        //
        //onDataChanged: function() {
        //    Deft.Promise.all([
        //        this.getAcceptanceData(),
        //        this.getTimeboxData()
        //    ]).then({
        //        success: this._onDataAssembled,
        //        scope: this
        //    });
        //},
        //
        //getChartEl: function() {
        //    return this.getEl().down('.metric-chart');
        //},
        //
        //_getRenderData: function() {
        //    var data = _.merge(
        //        {type: Ext.String.capitalize(this.getContext().getTimeboxScope().getType())},
        //        this.acceptanceData,
        //        this.timeboxData
        //    );
        //
        //    return data;
        //},
        //
        //_onDataAssembled: function (results) {
        //    this.acceptanceData = results[0];
        //    this.timeboxData = results[1];
        //
        //    var renderData = this._getRenderData();
        //    this.update(renderData);
        //
        //    this.refreshChart(this._getChartConfig(renderData));
        //},
        //
        //_getChartConfig: function (renderData) {
        //    var decimal = renderData.remaining / renderData.workdays,
        //        percentLeft = decimal < 1 ? Math.round(decimal * 100) : 0,
        //        color = Rally.util.Colors.cyan;
        //
        //    if (renderData.total === 0) {
        //        color = Rally.util.Colors.grey1;
        //    } else if (percentLeft === 0) {
        //        color = renderData.accepted === renderData.total ? Rally.util.Colors.lime : Rally.util.Colors.blue;
        //    } else if (percentLeft <= 25) {
        //        color = Rally.util.Colors.blue;
        //    }
        //
        //    return {
        //        chartData: {
        //            series: [{
        //                data: [
        //                    {
        //                        name: 'Days Done',
        //                        y: 100 - percentLeft,
        //                        color: color
        //                    },
        //                    {
        //                        name: 'Days Left',
        //                        y: percentLeft,
        //                        color: Rally.util.Colors.grey1
        //                    }
        //                ]
        //            }]
        //        }
        //    };
        //}
    });
})();
Ext.define('Rally.technicalservices.Utilities',{
    singleton: true,
    fetchPortfolioTypes: function(){
        var deferred = Ext.create('Deft.Deferred');

        var typeStore = Ext.create('Rally.data.wsapi.Store', {
            autoLoad: false,
            model: 'TypeDefinition',
            sorters: [{
                property: 'Ordinal',
                direction: 'ASC'
            }],
            filters: [{
                property: 'Parent.Name',
                operator: '=',
                value: 'Portfolio Item'
            }, {
                property: 'Creatable',
                operator: '=',
                value: true
            }]
        });

        typeStore.load({
            scope: this,
            callback: function (records, operation, success) {
                if (success){
                    deferred.resolve(records);

                } else {
                    deferred.reject("Error loading Portfolio Item Types:  " + operation.error.errors.join(','));
                }
            }
        });
        return deferred;
    },
    fetchWsapiCount: function(model, query_filters){
        var deferred = Ext.create('Deft.Deferred');

        Ext.create('Rally.data.wsapi.Store',{
            model: model,
            fetch: ['ObjectID'],
            filters: query_filters,
            limit: 1,
            pageSize: 1
        }).load({
            callback: function(records, operation, success){
                if (success){
                    console.log('operation');
                    deferred.resolve(operation.resultSet.totalRecords);
                } else {
                    deferred.reject(Ext.String.format("Error getting {0} count for {1}: {2}", model, query_filters.toString(), operation.error.errors.join(',')));
                }
            }
        });
        return deferred;
    },
    fetchWsapiRecords: function(model, query_filters, fetch_fields, ignoreContext){
        var deferred = Ext.create('Deft.Deferred');

        var store = Ext.create('Rally.data.wsapi.Store',{
            model: model,
            fetch: fetch_fields,
            filters: query_filters,
            pageSize: 1000,
            limit: Infinity,
            enablePostGet: true,
            context: {project: null} //here becuase we are looking for milestone specific infomration and that can be in any project now
        }).load({
            callback: function(records, operation, success){
                if (success){
                    deferred.resolve(records);
                } else {
                    deferred.reject(Ext.String.format("Error getting {0} for {1}: {2}", model, query_filters.toString(), operation.error.errors.join(',')));
                }
            }
        });
        return deferred;
    },
    fetchScheduleStates: function(){
        var deferred = Ext.create('Deft.Deferred');
        Rally.data.ModelFactory.getModel({
            type: 'HierarchicalRequirement',
            success: function(model) {
                var field = model.getField('ScheduleState');
                field.getAllowedValueStore().load({
                    callback: function(records, operation, success) {
                        if (success){
                            var values = [];
                            for (var i=0; i < records.length ; i++){
                                values.push(records[i].get('StringValue'));
                            }
                            deferred.resolve(values);
                        } else {
                            deferred.reject('Error loading ScheduleState values for User Story:  ' + operation.error.errors.join(','));
                        }
                    },
                    scope: this
                });
            },
            failure: function() {
                var error = "Could not load schedule states";
                deferred.reject(error);
            }
        });
        return deferred.promise;
    },
    fetchAllowedValues: function(model, fieldName){
        var deferred = Ext.create('Deft.Deferred');

        model.getField(fieldName).getAllowedValueStore().load({
            callback: function(records, operation, success) {
                if (success){
                    var vals = _.map(records, function(r){ return r.get('StringValue').length === 0 ? "None" : r.get('StringValue'); });
                    deferred.resolve(vals);
                } else {
                    deferred.reject("Error fetching category data");
                }
            },
            scope: this
        });

        return deferred;
    }
});

            
               Rally.launchApp('technical-services-MilestoneTrackingApp', {
                   name: 'Milestone Tracking Board'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.icon-help {
    color: #c0c0c0;
    cursor: pointer;
}
a.tooltip {
    position: relative;
    text-decoration: none;
    color: #c0c0c0;
}

a.tooltip span{
    display: none;
}

a.tooltip:hover {
    position: absolute;
    top: -20px;
    left: 0px;
    display: block;
    width: 250px;
    color: white;
    background-color: black;
    border: 1px solid black;
    padding: 5px;
}

.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
.selector-msg {
    color: #222222;
    font-family: ProximaNovaSemiBold,Helvetica,Arial;
    font-size: 14px;
    margin-top: 0px;
    margin-left: 15px;
    display: inline-block;
}
.latestories{
    color: #222222;
    font-family: ProximaNovaSemiBold,Helvetica,Arial;
    font-size: 14px;
    display: inline-block;
    margin-left: 5px;
    margin-right: 25px;
}
.iterationtrackingboard {
    overflow-y: hidden;
}
.iterationtrackingboard .header {
    line-height: normal;
    padding: 5px 5px 2px 5px;
}
.iterationtrackingboard .header .add-new {
    float: left;
}
.iterationtrackingboard .header .add-new .new {
    margin-left: 0;
}
.iterationtrackingboard .header .rui-triggerfield {
    margin-bottom: 5px;
}
.iterationtrackingboard .blank-slate-msg .x-panel-body {
    clear: both;
    padding-top: 20px;
    text-align: center;
}
.iterationtrackingboard .gridboard-filter-control {
    height: 22px;
    margin: 3px 0px 0px 5px;
}
.iterationtrackingboard .rui-leftright {
    margin-bottom: 10px;
}
.settings-no-grid {
    padding: 10px;
}
.icon-portfolioitem {
    speak: none;
    font-style: normal;
    font-weight: normal;
    font-variant: normal;
    text-transform: none;
    line-height: 1;
    -webkit-font-smoothing: antialiased;
}
.icon-portfolioitem:before {
    content: '\e024';
}
.stat-panel .collapsed-widget,
.stat-panel .collapsed-widget > div {
    display: none;
}
.stat-panel .expanded-widget,
.stat-panel .expanded-widget > div {
    display: block;
}
.stat-panel.collapsed .collapsed-widget,
.stat-panel.collapsed .collapsed-widget > div {
    display: inline-block;
}
.stat-panel.collapsed .expanded-widget,
.stat-panel.collapsed .expanded-widget > div {
    display: none;
}
.stats-banner .stat-panel {
    border-top: 1px solid #d6d6d6;
    border-left: 1px solid #d6d6d6;
    border-bottom: 1px solid #d6d6d6;
    height: 110px;
    text-align: center;
}
.stats-banner .stat-panel:first-child {
    border-left: 0;
}
.stats-banner .stat-panel:last-child {
    border-left-width: 2px;
}
.stats-banner .stat-panel .stat-title {
    color: #222222;
    font-family: ProximaNovaSemiBold, Helvetica, Arial;
    font-size: 12px;
    padding-top: 5px;
}
.stats-banner .stat-panel .stat-metric {
    color: #666666;
    font-family: ProximaNovaLight, Helvetica, Arial;
    font-size: 16px;
    height: 85px;
    padding-top: 20px;
}
.stats-banner .stat-panel .stat-metric .metric-percent {
    display: inline;
    font-size: 12px;
    vertical-align: super;
}
.stats-banner .stat-panel .stat-metric .metric-icon {
    color: #888888;
    font-size: 18px;
    padding-right: 5px;
}
.stats-banner .stat-panel .stat-metric .metric-chart {
    position: absolute;
    top: 22px;
    width: 100%;
    height: 75px;
}
.stats-banner .stat-panel .stat-metric .metric-subtext {
    bottom: 0px;
    color: #888888;
    font-family: ProximaNova, Helvetica, Arial;
    font-size: 11px;
    position: absolute;
    text-transform: lowercase;
    width: 100%;
    height: 20px;
}
.stats-banner .stat-panel .stat-metric .metric-chart-text {
    position: absolute;
    top: 43px;
    width: 100%;
}
.stats-banner .stat-panel .stat-metric .metric-chart-text.percent-offset {
    left: 10px;
    top: 41px;
}
.stats-banner .stat-panel .stat-metric .stat-secondary {
    color: #888888;
    font-family: ProximaNova, Helvetica, Arial;
    font-size: 11px;
    text-transform: lowercase;
}
.stats-banner .stat-panel .stat-metric .stat-carousel {
    display: inline-block;
    font-family: ProximaNova, Helvetica, Arial;
    font-size: 12px;
    margin-top: -20px;
}
.stats-banner .stat-panel .stat-metric .stat-carousel .rally-carousel-pane .x-box-inner {
    top: 0px !important;
}
.stats-banner .stat-panel .stat-metric .stat-carousel .carousel > span {
    display: inline !important;
    width: auto !important;
}
.stats-banner .stat-panel .stat-metric .stat-carousel .carousel > span > div {
    display: block !important;
}
.stats-banner .stat-panel .stat-metric .stat-carousel .carousel .carousel-panel > span {
    display: inline !important;
    width: auto !important;
}
.stats-banner .stat-panel .stat-metric .stat-carousel .carousel .carousel-panel > span > div {
    display: block !important;
}
.stats-banner .stat-panel .chart .highcharts-container {
    cursor: pointer;
}
.stats-banner .stat-panel .gauge .chart .highcharts-container {
    height: 75px;
    cursor: default;
}
.stats-banner .stat-panel .header {
    display: none;
}
.stats-banner .stat-panel.collapse-expand {
    background-color: #f6f6f6;
    width: 23px;
}
.stats-banner .stat-panel.collapse-expand .toggle-icon {
    color: #c0c0c0;
    font-size: 18px;
    position: relative;
    right: 1px;
}
.stats-banner .stat-panel.collapse-expand:hover {
    cursor: pointer;
}
.stats-banner .stat-panel.collapse-expand:hover .toggle-icon {
    color: #888888;
}
.stats-banner.collapsed .stat-panel {
    height: 25px;
    padding-top: 2px;
}
.stats-banner.collapsed .stat-panel .metric-icon {
    color: #888888;
    font-size: 14px;
    padding-right: 5px;
    vertical-align: middle;
}
.stats-banner.collapsed .stat-panel .stat-title {
    color: #222222;
    display: inline;
    font-family: ProximaNovaSemiBold, Helvetica, Arial;
    font-size: 12px;
    vertical-align: middle;
}
.stats-banner.collapsed .stat-panel .stat-metric {
    color: #888888;
    display: inline;
    font-family: ProximaNova, Helvetica, Arial;
    font-size: 14px;
    height: auto;
    padding-top: auto;
    padding-left: 10px;
    vertical-align: middle;
}
.stats-banner.collapsed .stat-panel .stat-metric .stat-metric-secondary {
    font-size: 11px;
}
.stats-banner.collapsed .stat-panel .stat-metric .metric-percent {
    font-size: 10px;
    vertical-align: super;
}
.pie-chart-legend {
    color: #3E576F;
    font-size: 12px;
    padding: 5px;
    border: 1px solid #909090;
    -webkit-border-radius: 5px;
    -moz-border-radius: 5px;
    border-radius: 5px;
}
.pie-chart-legend .legend-swatch {
    width: 17px;
    height: 12px;
    border: 1px solid #EEE;
    -webkit-border-radius: 5px;
    -moz-border-radius: 5px;
    border-radius: 5px;
    float: left;
    margin: 0 3px 0 6px;
}
.pie-chart-legend .legend-swatch.defined-sample-swatch {
    background: #E0E0E0;
    /* light-gray */
}
.pie-chart-legend .legend-swatch.in-progress-sample-swatch {
    background: #00a9e0;
}
.pie-chart-legend .legend-swatch.completed-sample-swatch {
    background: #8dc63f;
}
.pie-chart-legend .legend-swatch.blocked-sample-swatch {
    background: #EF3F35;
    /* rally red */
}
.iteration-progress-dialog .carousel .carousel-panel .scroll-button span {
    width: 45px;
    height: 50px;
    line-height: 46px;
}
.iteration-progress-dialog .carousel .carousel-panel .scroll-button span:hover {
    background-color: #e6e6e6;
    color: #666666;
}
.iteration-progress-toggle-button-group {
    margin-bottom: 5px;
}
.x-gecko .stats-banner.collapsed .stat-panel .stat-metric {
    line-height: 20px;
    vertical-align: top;
}
.x-gecko .stats-banner.collapsed .stat-panel .stat-metric .metric-percent {
    line-height: 10px;
}
.x-gecko.x-mac .stats-banner.collapsed .stat-panel .stat-metric {
    line-height: 22px;
}
    </style>

</head>
<body></body>
</html>
