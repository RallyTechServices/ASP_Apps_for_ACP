<!DOCTYPE html>

<html>

<head>

    <title>AETNA CAPABILITY PROJECT STATUS</title>

    <div id="cmp"></div>

    <div id="container"></div>

    <div id="chart"></div>

    <script type="text/javascript" src="/apps/2.1/sdk.js"></script>

    <style>

        .x-btn-hasBadge {
            overflow: visible;
        }

        .x-btn-badgeCls {
            font-size: 10px;
            position: absolute;
            top: -17px;
            right: 26px;
            display: inline-block;
            width: auto;
            font-weight: bold;
            color: white;
            text-shadow: rgba(0, 0, 0, 0.5) 0 -0.08em 0;
            -webkit-border-radius: 3px;
            border-radius: 3px;
            padding: 0px;
            padding: 1px 2px;
            background-image: none;
            background-color: #3f84a4;
            -webkit-box-shadow: rgba(0, 0, 0, 0.3) 0 0.1em 0.1em;
            box-shadow: rgba(0, 0, 0, 0.3) 0 0.1em 0.1em;
            z-index: 12;
        }

        .has-badge {
            overflow: visible !important;
        }

        .hide-badge {
            display: none !important;
        }

        .MainPanel .x-tab-bar .x-tab-bar-body .x-box-inner .x-tab {
            font-size:          24px ;
            height:             41px !important; /* Default value is 21, we add 20 = 41 */
            font:               sans-serif !important;
            fill:               none;
        }

        .pnl-alarm {
            background:         black;
            fill:               white;
        }

        .txt-alarm {
            font:               10px sans-serif;
            stroke:             red;
            stroke-opacity:     0.2;
            fill:               none;
        }

        .txt-tab {
            font:               24px sans-serif;
            fill:               none;
        }

        .txt-resiliency {
            font:               10px sans-serif;
            fill:               none;
        }

        .txt-emphasis {
            text-align:         right;
            font:               10px sans-serif;
            stroke:             black;
            stroke-opacity:     0.2;
            fill:               none;
        }

        .btn-export {
            background:         #ffffff;
            border-width:       1px;    !important;
            border:             1px solid   #c1c1c1;
            font-size:          1.5em;                    /*font-size:          10px sans-serif  !important;*/
            stroke:             gray;
        }

        .btn-combobox {
            background:         #c1c1c1;
            border-width:       1px;    !important;
            border:             1px solid   #c1c1c1;
            font-size:          24px sans-serif  !important;
            stroke:             gray;
        }

        .btn-selectAll {
            font-size:          8px;
            background:         #d3e1f1;  /*background:         #a8a8a8;*/
            border-width:       0px;    !important;
            font:               8px sans-serif;
            color:              black;
            stroke:             white;
        }

        .btn-selectNone {
            font-size:          8px;
            background:         #d3e1f1;
            border-width:       0px;    !important;
            font:               8px sans-serif;
            color:              black;
            stroke:             white;
        }

        .pnl-source {
            background:         green;
            color:              black;
            stroke:             gray;
        }

    </style>
        
    <script type="text/javascript">

        Rally.onReady(function() {

            // Source Project (People) containing Capabilities
            var glbSelectedProjectID        = '';                   // Current project folder (set dynamically)
            var glbCapabilityProjectID      = 188497080524;         // Capability project folder (set here manually)
            var glbSourceProjects           = [];
            var glbCurrentProject           = null;

            // Global variables
            var glbViewContainer            = null;
            var glbProgressBar              = "";
            var glbProgressBarTotal         = 0;
            var glbProgressBarColor         = "#B0C4DE";            // Light Steel Blue
            var glbProgressTimer            = null;

            var glbPortfolioItemType        = "Feature";            // Set DEFAULT Portfolio Item - Drop-down (picker)
            var glbPortfolioItemTypePath    = "PortfolioItem/" + glbPortfolioItemType;

            var glbStates                   = [];                   // Set array of valid Kanban states

            var glbReportingUnitsToggle     = false;

            var glbComboboxSuffix           = '_combobox';
            var glbComboboxLabelSuffix      = '_comboboxLabel';
            var glbComboboxButtonSelectAll  = '_buttonSelectAll';
            var glbComboboxButtonRemoveAll  = '_buttonRemoveAll';
            var glbButtonSuffix             = '_buttonSelect';
            var glbCheckboxSuffix           = '_checkbox';
            var glbTabPanelSuffix           = '_tabPanel';
            var glbExportSuffix             = '_export';
            var glbComboboxPanels           = [];

            var glbCapabilities_AETNA       = [];

            // Set Panel configuration settings
            var glbPanelControlRows         = 2.0;
            var glbPanelControlCols         = 5.0;
            var glbPanelWidth               = 1510;                 //1735;                 //1300;
            var glbPanelHeight              = 450;
            var glbHeaderHeight             = 95;
            var glbFactorWidth              = parseFloat( 0.98 );
            var glbFactorHeight             = parseFloat( 0.99 );
            var glbEmptyValue               = '_NONE_';
            var glbPanelTabItemId           = 'panelTabTop';
            var glbPanelSourceItemId        = 'panelCtrlBottomDelta_upper';
            
            // Set Panel configuration object
            var glbPanel_config             = {

                panelWidth:             glbPanelWidth,

                panelHeight:            glbHeaderHeight,

                panelCanvasWidth:       parseInt( glbPanelWidth * glbFactorWidth ),

                panelCanvasHeight:      parseInt( glbPanelHeight * glbFactorHeight ),

                panelRowHeight:         parseInt( glbHeaderHeight / glbPanelControlRows ),

                txtCls:                 'txt-resiliency',

                lblCls:                 'txt-emphasis',

                btnCls:                 'btn-combobox',

                csvCls:                 'btn-export',

                almCls:                 'txt-alarm',

                ctlCls:                 'pnl-alarm',

                tabCls:                 'MainPanel'
            };

            var setControlPanelToolbarItems     = function() {

                // PURPOSE: Return configuration of items within Control Panel Toolbar

                // Set array of items
                var panelItems                  = [

                    {   xtype:      'panel',

                        id:         'panelCtrlTop',

                        itemId:     'panelCtrlTop',

                        frame:      false,

                        border:     false,

                        rowLines:   false,

                        cls:        'cmp',

                        width:      glbPanel_config.panelWidth,

                        //height:     glbPanel_config.panelHeight,

                        renderTo:   'cmp',

                        layout: {

                            type:   'hbox',

                            align:  'stretch',

                            flex:   1

                        },

                        items: [

                            {
                                xtype:          'panel',

                                id:             'panelCtrlTopAlpha',

                                itemId:         'panelCtrlTopAlpha',

                                frame:          false,

                                border:         false,

                                cls:            'cmp',

                                //width:          485,
                                //width:          260,
                                width:          parseInt( glbPanel_config.panelWidth / glbPanelControlCols ),

                                renderTo:       Ext.getBody(),

                                layout: {

                                    type:   'vbox',

                                    align:  'left'
                                },

                                items: [

                                    {

                                        xtype:          'panel',

                                        id:             'panelCtrlTopAlpha_upper',

                                        itemId:         'panelCtrlTopAlpha_upper',

                                        frame:          false,

                                        border:         false,

                                        cls:            'cmp',

                                        padding:        '0 0 0 0',

                                        margin:         '0 0 0 0',

                                        //height:         50,

                                        renderTo:       'cmp'
                                    }
                                ]

                            },

                            {
                                xtype:          'panel',

                                id:             'panelCtrlTopBeta',

                                itemId:         'panelCtrlTopBeta',

                                frame:          false,

                                border:         false,

                                cls:            'cmp',

                                //width:          260,
                                width:          parseInt( glbPanel_config.panelWidth / glbPanelControlCols ),

                                renderTo:       Ext.getBody(),

                                layout: {

                                    type:   'vbox',

                                    align:  'left'
                                },

                                items: [

                                    {

                                        xtype:          'panel',

                                        id:             'panelCtrlTopBeta_upper',

                                        itemId:         'panelCtrlTopBeta_upper',

                                        frame:          false,

                                        border:         false,

                                        cls:            'cmp',

                                        padding:        '0 0 0 0',

                                        margin:         '0 0 0 0',

                                        //height:         50,

                                        renderTo:       'cmp'
                                    }
                                ]

                            },

                            {
                                xtype:          'panel',

                                id:             'panelCtrlTopCenter',

                                itemId:         'panelCtrlTopCenter',

                                frame:          false,

                                border:         false,

                                cls:            'cmp',

                                //width:          260,
                                width:          parseInt( glbPanel_config.panelWidth / glbPanelControlCols ),

                                renderTo:       Ext.getBody(),

                                layout: {

                                    type:   'vbox',

                                    align:  'left'
                                },

                                items: [

                                    {

                                        xtype:          'panel',

                                        id:             'panelCtrlTopCenter_upper',

                                        itemId:         'panelCtrlTopCenter_upper',

                                        frame:          false,

                                        border:         false,

                                        cls:            'cmp',

                                        padding:        '0 0 0 0',

                                        margin:         '0 0 0 0',

                                        //height:         50,

                                        renderTo:       'cmp'
                                    }
                                ]

                            },

                            {
                                xtype:          'panel',

                                id:             'panelCtrlTopGamma',

                                itemId:         'panelCtrlTopGamma',

                                frame:          false,

                                border:         false,

                                cls:            'cmp',

                                //width:          260,
                                width:          parseInt( glbPanel_config.panelWidth / glbPanelControlCols ),

                                renderTo:       Ext.getBody(),

                                layout: {

                                    type:   'vbox',

                                    align:  'left'
                                },

                                items: [

                                    {

                                        xtype:          'panel',

                                        id:             'panelCtrlTopGamma_upper',

                                        itemId:         'panelCtrlTopGamma_upper',

                                        frame:          false,

                                        border:         false,

                                        cls:            'cmp',

                                        padding:        '0 0 0 0',

                                        margin:         '0 0 0 0',

                                        //height:         50,

                                        renderTo:       'cmp'
                                    }
                                ]

                            },

                            {
                                xtype:          'panel',

                                id:             'panelCtrlTopDelta',

                                itemId:         'panelCtrlTopDelta',

                                frame:          false,

                                border:         false,

                                cls:            'cmp',

                                //width:          260,
                                width:          parseInt( glbPanel_config.panelWidth / glbPanelControlCols ),

                                renderTo:       Ext.getBody(),

                                layout: {

                                    type:   'vbox',

                                    align:  'left'
                                },

                                items: [

                                    {

                                        xtype:          'panel',

                                        id:             'panelCtrlTopDelta_upper',

                                        itemId:         'panelCtrlTopDelta_upper',

                                        frame:          false,

                                        border:         false,

                                        cls:            glbPanel_config.ctlCls,

                                        componentCls:   glbPanel_config.ctlCls,

                                        padding:        '0 0 0 0',

                                        margin:         '0 0 0 0',

                                        //height:         50,

                                        renderTo:       'cmp'
                                    }
                                ]

                            },

                        ]
                    },

                    {   xtype:      'panel',

                        id:         'panelCtrlBottom',

                        itemId:     'panelCtrlBottom',

                        frame:      false,

                        border:     false,

                        rowLines:   false,

                        cls:        'cmp',

                        width:      glbPanel_config.panelWidth,

                        //height:     glbPanel_config.panelHeight,

                        renderTo:   'cmp',

                        layout: {

                            type:   'hbox',

                            align:  'stretch',

                            flex:   1

                        },

                        items: [

                            {
                                xtype:          'panel',

                                id:             'panelCtrlBottomAlpha',

                                itemId:         'panelCtrlBottomAlpha',

                                frame:          false,

                                border:         false,

                                //cls:            'cmp',
                                //cls:            'pnl-source',
                                componentCls:   'pnl-source',

                                //width:          485,
                                width:          parseInt( glbPanel_config.panelWidth / glbPanelControlCols ),

                                renderTo:       Ext.getBody(),

                                layout: {

                                    type:   'vbox',

                                    align:  'left'
                                },

                                items: [

                                    {

                                        xtype:          'panel',

                                        id:             'panelCtrlBottomAlpha_upper',

                                        itemId:         'panelCtrlBottomAlpha_upper',

                                        frame:          false,

                                        border:         false,

                                        cls:            'cmp',

                                        padding:        '0 0 0 0',

                                        margin:         '0 0 0 0',

                                        //height:         50,

                                        renderTo:       'cmp'
                                    }
                                ]

                            },

                            {
                                xtype:          'panel',

                                id:             'panelCtrlBottomBeta',

                                itemId:         'panelCtrlBottomBeta',

                                frame:          false,

                                border:         false,

                                cls:            'cmp',

                                //width:          260,
                                width:          parseInt( glbPanel_config.panelWidth / glbPanelControlCols ),

                                renderTo:       Ext.getBody(),

                                layout: {

                                    type:   'vbox',

                                    align:  'left'
                                },

                                items: [

                                    {

                                        xtype:          'panel',

                                        id:             'panelCtrlBottomBeta_upper',

                                        itemId:         'panelCtrlBottomBeta_upper',

                                        frame:          false,

                                        border:         false,

                                        cls:            'cmp',

                                        padding:        '0 0 0 0',

                                        margin:         '0 0 0 0',

                                        //height:         50,

                                        renderTo:       'cmp'
                                    }
                                ]

                            },

                            {
                                xtype:          'panel',

                                id:             'panelCtrlBottomCenter',

                                itemId:         'panelCtrlBottomCenter',

                                frame:          false,

                                border:         false,

                                cls:            'cmp',

                                //width:          260,
                                width:          parseInt( glbPanel_config.panelWidth / glbPanelControlCols ),

                                renderTo:       Ext.getBody(),

                                layout: {

                                    type:   'vbox',

                                    align:  'left'
                                },

                                items: [

                                    {

                                        xtype:          'panel',

                                        id:             'panelCtrlBottomCenter_upper',

                                        itemId:         'panelCtrlBottomCenter_upper',

                                        frame:          false,

                                        border:         false,

                                        cls:            'cmp',

                                        padding:        '0 0 0 0',

                                        margin:         '0 0 0 0',

                                        //height:         50,

                                        renderTo:       'cmp'
                                    }
                                ]

                            },

                            {
                                xtype:          'panel',

                                id:             'panelCtrlBottomGamma',

                                itemId:         'panelCtrlBottomGamma',

                                frame:          false,

                                border:         false,

                                cls:            'cmp',

                                //width:          260,
                                width:          parseInt( glbPanel_config.panelWidth / glbPanelControlCols ),

                                renderTo:       Ext.getBody(),

                                layout: {

                                    type:   'vbox',

                                    align:  'left'
                                },

                                items: [

                                    {

                                        xtype:          'panel',

                                        id:             'panelCtrlBottomGamma_upper',

                                        itemId:         'panelCtrlBottomGamma_upper',

                                        frame:          false,

                                        border:         false,

                                        cls:            'cmp',

                                        padding:        '0 0 0 0',

                                        margin:         '0 0 0 0',

                                        //height:         50,

                                        renderTo:       'cmp'
                                    }
                                ]

                            },

                            {
                                xtype:          'panel',

                                id:             'panelCtrlBottomDelta',

                                itemId:         'panelCtrlBottomDelta',

                                frame:          false,

                                border:         false,

                                cls:            'cmp',

                                //width:          260,
                                width:          parseInt( glbPanel_config.panelWidth / glbPanelControlCols ),

                                renderTo:       Ext.getBody(),

                                layout: {

                                    type:   'vbox',

                                    align:  'left'
                                },

                                items: [

                                    {

                                        xtype:          'panel',

                                        id:             'panelCtrlBottomDelta_upper',

                                        itemId:         'panelCtrlBottomDelta_upper',

                                        frame:          false,

                                        border:         false,

                                        cls:            glbPanel_config.ctlCls,

                                        componentCls:   glbPanel_config.ctlCls,

                                        padding:        '0 0 0 0',
                                        
                                        margin:         '0 0 0 0',

                                        //height:         50,

                                        renderTo:       'cmp',

                                        layout: {

                                            type:   'hbox',

                                            align:  'center'
                                        },

                                    }
                                ]
                            }
                        ]
                    },

                    {   xtype:      'panel',

                        id:         glbPanelTabItemId,

                        itemId:     glbPanelTabItemId,

                        frame:      false,

                        border:     false,

                        padding:    '0 0 0 0',

                        margin:     '20 0 10 0',         // top, right, bottom, left

                        cls:        'cmp',

                        width:      glbPanel_config.panelWidth,

                        renderTo:   'cmp',

                        layout: {

                            type:   'hbox',

                            align:  'stretch',

                            flex:   1

                        }
                    }
                ]

                // Return configuration items
                return( panelItems );

            };



            // Global functions
            var closeProgressBar            = function( progressBar ) {

                // PURPOSE: Conditionally close the PROGRESSBAR

                // Determine if PROGRESSBAR is complete
                if ( progressBar.isHidden() == false ) {

                    // Reset PROGRESSBAR if 100% AND NOT hidden
                    progressBar.reset( true );

                    // Reset global progress bar total
                    glbProgressBarTotal     = 0.0;
                }
            };


            var refreshProgressBar           = function( progressBar, earnedValue, progressText ) {

                // PURPOSE: Refresh PROGRESSBAR with incremental earned value

                // Handle valid values ONLY
                //if ( ( earnedValue > 0.0 && earnedValue <= 1.0 ) || ( earnedValue >= 0.0 & earnedValue < 1.0 ) ) {
                if ( !(earnedValue < 0.0) && !(earnedValue > 1.0) ) {

                    // Set new Earned Value
                    var pbValue         = Math.min( glbProgressBarTotal + earnedValue, 1.0 );

                    // Set text
                    var pbText          = Math.round(pbValue * 100) + '%   [' + progressText + ']';

                    // Show PROGRESSBAR if hidden
                    if ( progressBar.isHidden() ) {

                        progressBar.show();
                    }

                    // Update PROGRESSBAR
                    progressBar.updateProgress( pbValue, pbText );

                } else {

                    // Set new Earned Value
                    var pbValue         = 1.0;

                    // Set text
                    var pbText          = Math.round(pbValue * 100) + '%   DONE!';
                }

                // Reset global progress bar total
                glbProgressBarTotal = pbValue;

                // Reset once complete
                if ( Math.round( ( glbProgressBarTotal ) * 100.0 ) >= 100 ) {

                    glbProgressBarTotal     = 1.0;

                    progressBar.reset( true );
                }
            };

            var setProgressBar            = function() {

                // PURPOSE: Set BUTTON for clearing selected items

                // Configure PROGRESSBAR
                var xRef = Ext.create('Ext.ProgressBar', {

                    width:      200,

                    height:     30,                             //46,                             //60,                             //46

                    border:     false,

                    floating:   true,

                    padding:    '5, 0, 0, 0',                   // top, right, bottom, left

                    style: {

                        animate:            true,

                        borderTopColor:     '#d1e4fd',

                        borderBottomColor:  '#7fa9e4',

                        borderRightColor:   '#7fa9e4',

                        foregroundColor:    'green',

                        backgroundColor:    '#FFFFFF',

                        borderColor:        glbProgressBarColor,

                        borderStyle:        'solid'
                    },

                    value:      0.0,                   // Floating point value between 0 and 1

                    text:       'Initializing ... 0%',

                    renderTo:   Ext.getBody()

                });

                // Return SLIDER object reference
                return ( xRef );
            };


            var refreshTimerBar           = function( progressBar, earnedValue, textMessage, textUnits, autoReset ) {

                // PURPOSE: Refresh PROGRESSBAR with incremental earned value
                //
                //  progressBar:    Ext.ProgressBar - previously-defined progress bar object,
                //  earnedValue:    float - values expected between 0.0 and 1.0
                //  textMessage:    string - message displayed along with progress bar value
                //  textUnits:      string - string value describing the progress bar value units (e.g.: '%' or 'secs')
                //  autoReset:      boolean -   true indicates progress bar automatic closure behavior will activate upon reaching 1.0
                //                              false indicates progress bar automatic closure behavior will be suppressed

                // Handle automatic reset
                if ( autoReset == true ) {

                    // Reset once complete
                    //if ( Math.round( ( glbProgressBarTotal ) * 100.0 ) == 100 ) {

                        glbProgressBarTotal     = 1.0;

                        progressBar.reset( true );

                        progressBar.hide();
                    //}
                } else {

                    // Handle valid values ONLY
                    if ( ( earnedValue > 0.0 && earnedValue <= 1.0 ) || ( earnedValue >= 0.0 & earnedValue < 1.0 ) ) {

                        // Set new Earned Value
                        //var pbValue         = glbProgressBarTotal + earnedValue;
                        var pbValue             = Math.min( glbProgressBarTotal + earnedValue, 1.0 );

                        // Set text
                        var pbText              = textMessage + Math.round(pbValue * 100) + textUnits;

                        // Show PROGRESSBAR if hidden
                        if ( progressBar.isHidden() ) {

                            progressBar.show();
                        }

                        // Update PROGRESSBAR
                        progressBar.updateProgress( pbValue, pbText );

                        // Reset global progress bar total
                        glbProgressBarTotal     = pbValue;
                    }
                }
            };



            var getRecordsetCollection  = function( recordset, collectorField, collectorFetch ) {

                // PURPOSE: Return sub-sollections via WSAPI v2.0 collector method ('foreign key') for items that are embedded in a recordset
                //
                //          recordset is single JSON object (not an array of JSON objects) originally provided by WSAPI
                //          collectorField is the property name of the sub-sollection
                //          sollectorFetch is the fetch array of field names to be collected

                // Setup Promises and Deferred
                var deferred            = Ext.create('Deft.Deferred');

                // Instantiate return variable
                var subfindings         = [];

                // Handle empty collectorField
                if ( collectorField == null ) {

                    // Return non-findings
                    deferred.resolve( subfindings );                                                    
                }

                // Handle empty fetch array
                if ( collectorFetch == null ) {

                    collectorFetch      = [ 'Name', 'ObjectID' ];
                }

                // Handle existing items ONLY
                if ( recordset.length !== null ) {

                    // Fetch collection items
                    recordset.getCollection( collectorField ).load({

                        fetch:      collectorFetch,

                        callback:   function( subRecords, subOperation, subSuccess ) {

                            // Handle successfully returned items
                            if ( subSuccess && (subRecords.length > 0) ) {

                                // Loop through records to construct return array
                                Ext.Array.each( subRecords, function( subRec ) {

                                    // Capture all returned record
                                    subfindings.push( subRec );
                                });

                                // Return findings
                                deferred.resolve( subfindings );                                                    

                            } else {

                                // Return findings
                                deferred.resolve( subfindings );                                                    
                            }
                        }
                    });
                }

                return deferred.promise;

            };



            var getFOIPredecessors              = function( currentPI_Items ) {

                // PURPOSE: Return Features-of-Interest with Predecessors

                // Setup Promises and Deferred
                var deferred            = Ext.create('Deft.Deferred');

                // Initialize
                var pi_FOI          = [];
                var pi_Empty        = [];
                var pi_hash         = [];

                // Handle populated returned values ONLY
                if ( currentPI_Items.length > 0 ) {

                    // Enumerate through current PI Items
                    for ( i = 0; i < currentPI_Items.length; i++ ) {

//window.console && console.log ( "pi_CurrentItems[i]:", pi_CurrentItems[i] );

                        // Handle FOIs with Predecessors ONLY
                        if ( currentPI_Items[i].data.Predecessors.Count > 0 ) {

                            pi_FOI.push( currentPI_Items[i] );
                        }

                        // Handle last item
                        if ( i >= (currentPI_Items.length-1) ) {

                            // Return FOIs
                            deferred.resolve( pi_FOI );                                                    
                        }
                    }
                
                } else { 

                    // Return FOIs
                    deferred.resolve( pi_Empty );
                }

                return deferred.promise;
            };




            var getFeaturePredecessors_v2       = function( currentPI_Items, capabilityPI_Items ) {

                // PURPOSE: Return Feaures(s) that are a Predecessor to the Current PI item

                // Setup Promises and Deferred
                var deferred            = Ext.create('Deft.Deferred');

                // Initialize
                var pi_FOI          = [];
                var pi_Empty        = [];
                var pi_hash         = [];

                // Create hash table of CAPABLE items
                Ext.Array.each( capabilityPI_Items, function( cpbltyItm ) {

                    // Add item to hash table
                    pi_hash.push( cpbltyItm );
                });

//window.console && console.log ( "pi_hash:", pi_hash );

                // Handle populated returned values ONLY
                if ( capabilityPI_Items.length > 0 ) {

                    // Enumerate through current PI Items
                    for ( i = 0; i < currentPI_Items.length; i++ ) {

//window.console && console.log ( "pi_CurrentItems[i]:", pi_CurrentItems[i] );

                        if ( currentPI_Item[i].data.Predecessors.Count > 0 ) {

                            // Configure Build sub-collection GET
                            var collectorField      = 'Predecessors';

                            var collectorFetch      = [ 'Name', 'ObjectID' ];

            //window.console && console.log ("collectorField ...", collectorField);
            //window.console && console.log ("collectorFetch ...", collectorFetch);

                            // Fetch Build's Changeset collection
                            getRecordsetCollection( currentPI_Item[i], collectorField, collectorFetch ).then({

                                success: function( foundPredItems ) {

//window.console && console.log ("foundPredItems ...", foundPredItems);

                                    // Handle non-zero length arrays ONLY
                                    if ( foundPredItems.length > 0 ) {

                                        for( i = 0; i < foundPredItems.length; i++ ) {

                                            // Build array
                                            pi_Preds.push( foundPredItems[i] );

            //window.console && console.log ("foundPredItems[i] ...", foundPredItems[i]);
            //window.console && console.log ("pi_Preds ...", pi_Preds);

            //window.console && console.log ("i >= (foundPredItems.length-1)", i, (foundPredItems.length-1), i >= (foundPredItems.length-1));

                                            // Handle last item
                                            if ( i >= (foundPredItems.length-1) ) {

                                                // Return findings
                                                deferred.resolve( pi_Preds );                                                    
                                            }
                                        }
                                    
                                    } else {

                                        // Return findings
                                        deferred.resolve( pi_Empty );
                                    }
                                },

                                error: function( model, error ) {

            //window.console && console.log ("pi_Empty ...", pi_Empty);

                                    // Return findings
                                    deferred.resolve( pi_Empty );
                                }
                            });

                        } else {

            //window.console && console.log ("pi_Empty ...", pi_Empty);

                            // Return findings
                            deferred.resolve( pi_Empty );                                                    
                        }
                    }

                } else {

                    // Handle unsuccessful findings
                    deferred.resolve( pi_Empty );
                }

                return deferred.promise;

            };





            var getFeaturePredecessors          = function( currentPI_Item, capabilityPI_Items ) {

                // PURPOSE: Return Feaures(s) that are a Predecessor to the Current PI item

                // Setup Promises and Deferred
                var deferred            = Ext.create('Deft.Deferred');

                // Initialize return Predecessor array
                var pi_Preds                    = [];
                var pi_Empty                    = [];

//window.console && console.log ("currentPI_Item ...", currentPI_Item);
//window.console && console.log ("capabilityPI_Items ...", capabilityPI_Items);
//window.console && console.log ("currentPI_Item.data.Predecessors.Count ...", currentPI_Item.data.Predecessors.Count);

                // Verify Predecessors exist
                if ( currentPI_Item.data.Predecessors.Count > 0 ) {

                    // Configure Build sub-collection GET
                    var collectorField      = 'Predecessors';

                    var collectorFetch      = [ 'Name', 'ObjectID' ];

//window.console && console.log ("collectorField ...", collectorField);
//window.console && console.log ("collectorFetch ...", collectorFetch);

                    // Fetch Build's Changeset collection
                    getRecordsetCollection( currentPI_Item, collectorField, collectorFetch ).then({

                        success: function( foundPredItems ) {

//window.console && console.log ("foundPredItems ...", foundPredItems);

                            // Handle non-zero length arrays ONLY
                            if ( foundPredItems.length > 0 ) {

                                for( i = 0; i < foundPredItems.length; i++ ) {

                                    // Build array
                                    pi_Preds.push( foundPredItems[i] );

//window.console && console.log ("foundPredItems[i] ...", foundPredItems[i]);
//window.console && console.log ("pi_Preds ...", pi_Preds);

//window.console && console.log ("i >= (foundPredItems.length-1)", i, (foundPredItems.length-1), i >= (foundPredItems.length-1));

                                    // Handle last item
                                    if ( i >= (foundPredItems.length-1) ) {

                                        // Return findings
                                        deferred.resolve( pi_Preds );                                                    
                                    }
                                }
                            
                            } else {

                                // Return findings
                                deferred.resolve( pi_Empty );
                            }
                        },

                        error: function( model, error ) {

//window.console && console.log ("pi_Empty ...", pi_Empty);

                            // Return findings
                            deferred.resolve( pi_Empty );
                        }
                    });

                } else {

//window.console && console.log ("pi_Empty ...", pi_Empty);

                    // Return findings
                    deferred.resolve( pi_Empty );                                                    
                }

                return deferred.promise;
            };



            var isCapability    = function( pi_Item ) {

                // PURPOSE: Determine if Portfolio is also an AETNA Capability
                //
                // AETNA Capability: Defined as a Portfolio Item at the lowest level of the Portfolio Item hierarchy (typically Feature)
                // that possesses one (1) or many Predecessors AND zero (0) Successors.

                // Initialize return value to Capability not found
                var bRtnVal     = false;

                // Verify Predecessors exist
                if ( pi_Item.data.Predecessors.Count > 0 ) {

                    // Verify Successors do not exist
                    if ( pi_Item.data.Successors.Count == 0 ) {

                        // Set return value to indicate Capability found
                        bRtnVal     = true;
                    }
                }

                // Return Capability indicator
                return ( bRtnVal );
            };



            var getFeaturesOfInterest_AETNA  = function( selectedSource, capabilitiesSource ) {

                // PURPOSE: Return a customized array of Features in current location plus Features with predecessor relationships in Capabilites folder
                //
                //          where:
                //                  selectedSource is a project object indicating the current project
                //                  capabilitiesSource is a project object indicating the location of AETNA Capabilities
                //          logic:
                //                  Each Feature within <selectedSource> project is added to "features of interest" (FOI) list
                //                  Each FOI with a predecessor relationship to a Feaure in <capabilitiesSource? is also added to FOI list

                // Setup Promises and Deferred
                var deferred                = Ext.create('Deft.Deferred');

                // Initialize variables
                var pi_Empty                = [];
                var piCapabilities_AETNA    = [];
                var pi_Hash                 = [];

                // Validate project folder parameters
                var isSelectedSourceOK      = ( (selectedSource !== undefined) && (selectedSource !== null) );
                var isCapabilitiesSourceOK  = ( (capabilitiesSource !== undefined) && (capabilitiesSource !== null) );

                // Handle valid project ONLY
                if ( (!isSelectedSourceOK) || (!isCapabilitiesSourceOK) ) {

                    deferred.resolve( pi_Empty );

                } else {

                    // Fetch Features from current and capabilities project folders simultaneously
                    var summaryPromise                      = Promise.all(

                        [
                            getPortfolioItemDetailByProject( selectedSource._ref ),         // Fetch list of pre-qualified Portfolio Items derived from current project location
                            getPortfolioItemDetailByProject( capabilitiesSource._ref )      // Fetch list of pre-qualified Portfolio Items derived from current project location
                        ]

                        ).then(function( summaryValues ) {

                            // Set references to return values
                            var currentItems                = summaryValues[0];
                            var capableItems                = summaryValues[1];

                            // Fetch Features-of-Interest from two separate data sources simultaneously
                            var detailPromise               = Promise.all(

                                [
                                    setCurrent_AETNA( currentItems ),
                                    setCapable_AETNA( currentItems, capableItems )
                                ]

                                ).then(function( detailValues ) {

                                    // Set references to return values
                                    var currentFOI              = detailValues[0];
                                    var capableFOI              = detailValues[1];

window.console && console.log ("currentFOI ...", currentFOI);
window.console && console.log ("capableFOI ...", capableFOI);

                                    // Build Capabilites hash table array
                                    Ext.Array.each( capableItems, function( cpbltyItm ) {

                                        // Add item to hash table
                                        pi_Hash.push( cpbltyItm.data.ObjectID );
                                    });

window.console && console.log ("pi_Hash ...", pi_Hash);

                                    // Add current Features-of-interest to return array
                                    if ( currentFOI.length > 0 ) {

                                        // Enumerate through current FOIs
                                        for ( i = 0; i < currentFOI.length; i++ ) {

                                            piCapabilities_AETNA.push( currentFOI[i] );
                                        }
                                    }
                                    
                                    // Add capable Features-of-interest to return array
                                    if ( capableFOI.length > 0 ) {

                                        // Enumerate through current FOIs
                                        for ( i = 0; i < capableFOI.length; i++ ) {

                                            // Handle matches ONLY
                                            if ( capableItems.indexOf( capableFOI[i].data.ObjectID ) !== -1 ) {
                                                
                                                piCapabilities_AETNA.push( capableFOI[i] );

window.console && console.log ("capableItem added ...", capableFOI[i]);

                                            }
                                        }
                                    }

                                    // Return Capabilities
                                    deferred.resolve( piCapabilities_AETNA );
                                }
                            );
                        }
                    );            
                }

                return deferred.promise;
            };




            var getPortfolioItemDetailByProject  = function( projectURL ) {

                // Purpose: Fetch available Portfolio Items that:
                //
                //      1) match current user's permissions AND
                //      2) correspond to selected people folder AND
                //      3) match lowest level within Portfolio Item Hierarchy

                // Setup Promises and Deferred
                var deferred        = Ext.create('Deft.Deferred');

                // Initialize
                var pi_Valid        = [];
                var pi_Empty        = [];

                // Fetch list of available items for combobox
                Ext.create('Rally.data.WsapiDataStore', {

                    context: {

                        project:            projectURL,

                        projectScopeUp:     false,

                        projectScopeDown:   true
                    },

                    //model:      'PortfolioItem/Feature',
                    model:                  glbPortfolioItemTypePath,

                    limit:                  7000,

                    autoLoad:               true,

                    fetch:      [
                                    'FormattedID',
                                    'Name',
                                    'ObjectID',
                                    'PortfolioItemType',
                                    'Rank',
                                    'PortfolioItemTypeName',
                                    'Project',
                                    'State',
                                    'Release',
                                    'ReleaseDate',
                                    'Predecessors',
                                    'Successors',
                                    'DragAndDropRank',
                                    'c_BuildEffort',
                                    'c_LOB',
                                    'c_OwningTrain',
                                    'c_PriorityLevel'
                    ],

                    listeners: {

                        load: function( store, pi_data, success ) {

                            if ( success ) {

                                // Build array matching portfolio item types
                                if ( pi_data.length > 0 ) {

                                    // Handle successful findings
                                    pi_Valid        = pi_data;
                                    deferred.resolve( pi_Valid );

                                } else {

                                    // Handle unsuccessful findings
                                    deferred.resolve( pi_Empty );
                                }

                            } else {

                                // Handle unsuccessful findings
                                deferred.reject( pi_Empty );
                            }
                        }
                    }
                });

                return deferred.promise;

            };



            var setCurrent_AETNA        = function( pi_CurrentItems ) {

                // PURPOSE: Add current project folder Features to Features-of-Interest array

                // Setup Promises and Deferred
                var deferred        = Ext.create('Deft.Deferred');

                // Initialize
                var pi_FOI          = [];
                var pi_Empty        = [];

                // Handle populated returned values ONLY
                if ( pi_CurrentItems.length > 0 ) {

//window.console && console.log ("pi_CurrentItems ...", pi_CurrentItems);

                    // Enumerate through current PI Items
                    for ( i = 0; i < pi_CurrentItems.length; i++ ) {

                        // Add current items to return array
                        pi_FOI.push( pi_CurrentItems[i] );

                        // Handle last item
                        if ( i >= (pi_CurrentItems.length-1) ) {

                            // Return Capabilities
                            deferred.resolve( pi_FOI );
                        }
                    }

                } else {

                    // Handle unsuccessful findings
                    deferred.resolve( pi_Empty );
                }

                return deferred.promise;

            };




            var setCapable_AETNA        = function( pi_CurrentItems, pi_CapableItems ) {

                // PURPOSE: Add capable project folder Features to Features-of-Interest array

                // Setup Promises and Deferred
                var deferred        = Ext.create('Deft.Deferred');

                // Initialize
                var pi_FOI          = [];
                var pi_Empty        = [];
                var pi_Hash         = [];
                var pi_Cpbl         = [];

                // Fetch FOIs with Predecessors
                getFOIPredecessors( pi_CurrentItems ).then({

                    success: function( pi_FOI ) {

                        // Handle found items

window.console && console.log ("pi_FOI ...", pi_FOI);

                        // Return Capabilities
                        deferred.resolve( pi_FOI );
                    },

                    error: function() {

                        deferred.reject( pi_Empty );
                    }
                });

                return deferred.promise;

            };




            var setTooltip                  = function( thisItem, toolTipText ) {

                // PURPOSE: Set toolTip object

                // Define object
                var toolTip                 = Ext.create('Rally.ui.tooltip.ToolTip', {

                    autoShow:           true,

                    destroyAfterHide:   true,

                    target:             thisItem.getEl(),

                    html:               "<p><strong>" + toolTipText + "</p>"
                });

                // Return object
                return( toolTip );
            };



            var toggleSourcesComboSelect = function( panelItemId ) {

                // PURPOSE: Execute functionality for resetting selection of default Source Project

                // Set reference to the Source combobox
                var combobox        = Ext.getCmp( panelItemId + glbComboboxSuffix );

                // Handle existing Comboboxes ONLY
                if ( ( combobox !== null ) && ( combobox !== undefined ) && ( combobox.xtype == 'combobox' ) ) {

                    // Clear Source combobox
                    combobox.clearValue();

                    // Prepare combobox for handling
                    combobox.expand();

                    // Set reference to combobox Store
                    var store           = combobox.getStore();

                    // Handle combobox with Items ONLY
                    if ( store.data.items.length > 0 ) {

                        // Get record items within combobox
                        var records     = combobox.getStore().getRange();

                        // Set Source project to be matched
                        var defaultProject          = null;
                        for ( var i = 0; i < glbSourceProjects.length; i++ ) {

                            // Determine which Source project is default
                            if ( glbSourceProjects[i].isDefault == true ) {

                                // Set Source project
                                defaultProject      = glbSourceProjects[i];
                            }
                        }

                        // Enumerate through and set default Project as current Project
                        if ( defaultProject == null ) {

                            for ( var i = 0; i < glbSourceProjects.length; i++ ) {

                                // Determine which Source project is default
                                if ( glbSourceProjects[i].ObjectID == glbCurrentProject.ObjectID ) {

                                    // Set default
                                    glbSourceProjects[i].isDefault  = true;

                                    // Set Selected item equivalent to Default
                                    glbSourceProjects[i].isSelected = true;

                                    // Set deault Project
                                    defaultProject                  = glbSourceProjects[i];

                                    // Leave For Loop
                                    break;
                                }
                            }
                        }

                        // Enumerate through each combobox item
                        Ext.each( records, function (rec) {

                            picker          = combobox.getPicker();
                            node            = combobox.getPicker().getNode(rec);

                            // Test for a match
                            if ( rec.data.ObjectID == defaultProject.ObjectID ) {

                                // Mark checkboxes as selected
                                if ( node !== null ) {

                                    combobox.setValue( defaultProject.ObjectID );
                                }                                

                                combobox.collapse();

                                // Stop processing
                                return;
                            }
                        });
                    }

                    // Toggle enablement of Combobox, SelectAll button, and RemoveAll button
                    toggleSourceDisability( panelItemId, false );
                }
            };



            var setButtonBadgeText      = function( panelItemId, badgeText ) {

                // PURPOSE: Set Button Badge text

                // Set reference to Button with Badge
                var badgeComponent      = Ext.getCmp( panelItemId + glbComboboxButtonSelectAll );

                // Handle Button's Badge Text
                badgeComponent.setBadgeText( badgeText );
            };



            var resetAllFilters   = function( bIsSelectAll ) {

                // PURPOSE: Return all filters to their default selections

                // Loop through each filter Panel (container)
                Ext.Array.each( glbComboboxPanels, function( pnl ) {

                    // Reset combobox selections
                    toggleButtonComboSelect( pnl.itemId, bIsSelectAll, true );
                });
            };



            var toggleButtonComboSelect = function( panelItemId, bIsSelectAll, bCollapseBox ) {

                // PURPOSE: Execute functionality for selecting and de-selecting in multiselect Comboboxes

                // Handle valid Panels ONLY
                if ( ( panelItemId !== null ) && ( panelItemId !== undefined ) && ( panelItemId !== '' ) ) {

                    // Fetch reference to Combobox that is alongside this item within the current panel
                    var combobox        = Ext.getCmp( panelItemId + glbComboboxSuffix );

                    // Handle existing Comboboxes ONLY
                    if ( ( combobox !== null ) && ( combobox !== undefined ) ) {

//window.console && console.log ( "combobox:", combobox );

                        // Handle scenario where ALL items are selected
                        if ( bIsSelectAll ) {

                            // Prepare combobox for handling
                            combobox.expand();

                            var bProceed            = false;
                            var store               = combobox.getStore();

//window.console && console.log ( "store:", store );

                            // Proceed if ALL records are NOT already selected
                            if ( combobox.lastSelection.length !== store.data.items.length ) {
                            
                                // Instantiate variables
                                var node;
                                var records         = combobox.getStore().getRange();

                                // Toggle proceed value
                                bProceed            = true;

window.console && console.log ( "records:", records );

                                // Mark checkboxes as selected
                                Ext.each(records, function (rec) {

                                    picker          = combobox.getPicker();
                                    node            = combobox.getPicker().getNode(rec);

//window.console && console.log ( "picker:", picker );
//window.console && console.log ( "node:", node );

                                    if ( node !== null ) {

                                        // Set check mark for selected record
                                        Ext.get(node).down('input').dom.checked = true;
                                        //node.down('input').dom.checked = true;
                                    }

                                });

                                // Mark row items as selected
                                if ( node !== null ) {

                                    // Select all items
                                    combobox.select(store.getRange());

                                    // Conditionally collapse combobox
                                    if ( bCollapseBox ) {

                                        combobox.collapse();
                                    }
                                }
                            }

                        } else {

                            // Select zero items
                            combobox.clearValue();
                        }

                        // Update Button Badge's text
                        var selectionCount      = combobox.lastSelection.length;
                        setButtonBadgeText( panelItemId, selectionCount.toString() );
                    }                    
                }
            };



            var setButtonComboSelect    = function( panelName, bIsSelectAll ) {

                // PURPOSE: Create button for selecting and de-selecting items in multiselect Comboboxes

                // Initialize
                var buttonSuffix        = '';
                var buttonIconName      = '';
                var buttonClass         = '';

                var buttonText          = '';

                // Set parameters based upon button functionality
                buttonSuffix            = glbComboboxButtonRemoveAll;
                buttonText              = '\uff0d';         // unicode minus sign

                if ( bIsSelectAll ) {

                    buttonSuffix        = glbComboboxButtonSelectAll;
                    buttonText          = '\uff0b';         // unicode plus sign

                }

                //var selectButton        = Ext.create('Rally.ui.Button', {
                var selectButton        = Ext.create('Ext.ux.button.BadgeButton', {

                    xtype:      'badgebutton',              //'rallybutton',

                    id:         panelName + buttonSuffix,

                    itemId:     panelName + buttonSuffix,

                    width:      35,                         //30

                    height:     20,

                    //margin:     '0 0 0 0',                // top, right, bottom, left

                    //padding:    '0 0 0 0',

                    cls:        glbPanel_config.btnCls,     //glbPanel_config.lblCls

                    text:       buttonText,

                    handler: function() {

                        toggleButtonComboSelect( panelName, bIsSelectAll, false );

                    }
                });

                // Return item
                return( selectButton );

            };



            var setButtonExportGrid     = function( grid, panelItemId ) {

                // PURPOSE: Create Rally button for exporting grid data

                var toolTip                     = null;

                var selectButton                = Ext.create('Ext.button.Button', {

                    xtype:      'button',

                    id:         panelItemId + glbExportSuffix,

                    itemId:     panelItemId + glbExportSuffix,

                    align:      'center',                   //'left'

                    width:      35,

                    height:     20,

                    padding:    '0 0 0 8',

                    margin:     '10 0 0 5',                 // top, right, bottom, left

                    cls:        glbPanel_config.csvCls,     //glbPanel_config.btnCls,

                    iconAlign:  'top',

                    iconOnly:   true,

                    iconCls:    'icon-export',              //see https://gusmith.wordpress.com/2015/03/12/sencha-touch-default-iconcls-list/

                    listeners: {

                        click: function() {

                            // Set reference to Grid Export object functionality
                            var grExport        = Ext.create('GridExporter');

                            // Export grid
                            grExport.exportGrid( grid );
                        },

                        mouseover: function() {

                            // Clear Tool Tip
                            if ( toolTip !== null ) {

                                toolTip.close();
                            }

                            // Set toolTip object
                            toolTip             = setTooltip( this, 'Export to CSV.' );
                        },

                        mouseout: function() {

                            // Clear Tool Tip
                            if ( toolTip !== null ) {

                                toolTip.close();
                            }
                        }
                    }
                });

                // Return item
                return( selectButton );
            };


            var setCheckboxLabel   = function( panelName ) {

                // PURPOSE: Instantiate combobox label used to select Portfolio Items

                // Initialize
                var comboboxLabelDisplay    = setControlPanelLabel( panelName );

                // set Portfolio item mini-Store into Combobox
                var comboboxLabel   = Ext.create('Ext.draw.Text', {

                    //xtype:      'text',

                    id:         panelName + glbComboboxLabelSuffix,

                    itemId:     panelName + glbComboboxLabelSuffix,

                    width:      60,         //75

                    textAlign:  'left',

                    margin:     '17 5 5 0',

                    cls:        glbPanel_config.lblCls,

                    text:       comboboxLabelDisplay + ':'

                });

                // Return comboBox reference
                return comboboxLabel;
            };


            var setUnitCheckbox                 = function( panelName ) {

                // PURPOSE: Create Units checkbox
                //
                //          where:
                //
                //          True indicates report values are expressed as SUM OF COUNT
                //          False indicates report values are epressed in PERCENTAGES OF TOTAL

                // Set app checkbox
                var unitCheckbox                = Ext.create('Ext.form.field.Checkbox', {

                    id:             panelName + glbCheckboxSuffix,

                    itemId:         panelName + glbCheckboxSuffix,

                    padding:        '0 0 0 0',

                    margin:         '0 0 0 0',      // top, right, bottom, left

                    checked:        true,

                    value:          false,

                    listeners: {

                        change: function( chkBox, newValue, oldValue, options ){

                            // Toggle gloal references
                            switch( panelName ) {

                                case 'panelCtrlTopDelta_upper':

                                    // Set Reporting Unit
                                    glbReportingUnitsToggle             = newValue;
                                    
                                    break;

                                // Enable/Disable SOURCE comboxbox and buttons
                                case 'panelCtrlBottomDelta_upper':

                                    // Toggle Disability
                                    toggleSourceDisability( panelName, newValue );

                                    break;
                            }
                        }
                    }
                });

                // Return item
                return( unitCheckbox );
            };



            var toggleSourceDisability          = function( panelItemId, bSourceSetting ) {

                // PURPOSE: Toggle Source Combobox, SelectALl button, and RemoveAll button

                var cmp     = null;

                // Toggle Combobox
                cmp         = Ext.getCmp( panelItemId + glbComboboxSuffix );
                cmp.setDisabled( !bSourceSetting );

                // Toggle SelectAll-Button
                cmp         = Ext.getCmp( panelItemId + glbComboboxButtonSelectAll );
                cmp.setDisabled( !bSourceSetting );

                // Toggle RemoveAll BUtton
                cmp         = Ext.getCmp( panelItemId + glbComboboxButtonRemoveAll );
                cmp.setDisabled( !bSourceSetting );

            };



            var setButtonReset                  = function( panelName ) {

                // PURPOSE: Create RESET button

                var toolTip                     = null;

                var selectButton                = Ext.create('Ext.button.Button', {

                    xtype:      'button',

                    id:         panelName + glbButtonSuffix + '_reset',

                    itemId:     panelName + glbButtonSuffix + '_reset',

                    text:       'Reset',

                    align:      'center',                   //'left'

                    width:      63,

                    height:     25,

                    padding:    '0 0 0 0',

                    margin:     '0 0 0 0',                  // top, right, bottom, left

                    //cls:      glbPanel_config.btnCls,     //glbPanel_config.btnCls,

                    //iconCls:  'icon-add',                 //see https://gusmith.wordpress.com/2015/03/12/sencha-touch-default-iconcls-list/

                    listeners: {

                        click: function() {

                            // Reset all combobox filter settings to default
                            resetAllFilters( true );
                        },

                        mouseover: function() {

                            if ( toolTip !== null ) {

                                toolTip.close();
                            }

                            // Set toolTip object
                            toolTip             = setTooltip( this, 'Reset filter settings to default.' );
                        },

                        mouseout: function() {

                            // render message
                            if ( toolTip !== null ) {

                                toolTip.close();
                            }
                        }
                    }
                });

                // Return item
                return( selectButton );

            };



            var setButtonApply                  = function( panelName ) {

                // PURPOSE: Create APPLY button

                var toolTip                     = null;

                var selectButton                = Ext.create('Ext.button.Button', {

                    xtype:      'button',

                    id:         panelName + glbButtonSuffix + '_apply',

                    itemId:     panelName + glbButtonSuffix + '_apply',

                    text:       'Apply',

                    align:      'right',                   //'left'

                    width:      63,

                    height:     25,

                    padding:    '0 0 0 0',

                    margin:     '0 0 0 0',                  // top, right, bottom, left

                    //cls:        glbPanel_config.btnCls,     //glbPanel_config.btnCls,

                    //iconCls:    'icon-add',                 //see https://gusmith.wordpress.com/2015/03/12/sencha-touch-default-iconcls-list/

                    listeners: {

                        click: function() {

                            // Reapply selection of Capabilities
                            reapplyCapabilities( getSelectedProjects(), getCapabilityProject() ).then({

                                success: function( arr_Capabilities ) {

                                    // Handle found Capabilites ONLY
                                    if ( arr_Capabilities.length > 0 ) {

                                        // Reset global reference to reflect newly found Capabilities
                                        glbCapabilities_AETNA       = arr_Capabilities;

window.console && console.log ( "glbCapabilities_AETNA.length:", glbCapabilities_AETNA.length );

                                        // Reset Control Panels with updated Capabilities
                                        resetControlPanel( glbCapabilities_AETNA );

                                        // Populate Tab Panels
                                        executeStatus( glbCapabilities_AETNA, glbComboboxPanels );
                                    }
                                }
                            });
                        },

                        mouseover: function() {

                            if ( toolTip !== null ) {

                                toolTip.close();
                            }

                            // Set toolTip object
                            toolTip             = setTooltip( this, 'Apply filter settings to reports.' );
                        },

                        mouseout: function() {

                            // render message
                            if ( toolTip !== null ) {

                                toolTip.close();
                            }
                        }
                    }
                });

                // Return item
                return( selectButton );

            };



            var resetSelectedSourceProjects     = function( selectedSourceIDs ) {

                // PURPOSE: Toggle selected Source projects

                // Handle existing selections AND existing Source Projects ONLY
                if ( (selectedSourceIDs.length > 0) && (glbSourceProjects.length > 0) ) {

                    // Cycle through Source project IDs
                    for ( i = 0; i < glbSourceProjects.length; i++ ) {

                        // Cycle through Source project IDs
                        for ( j = 0; j < selectedSourceIDs.length; j++ ) {

                            // Set item
                            glbSourceProjects[i].isSelected    = false;

                            // Find match
                            if ( selectedSourceIDs[j] == glbSourceProjects[i].ObjectID ) {

                                // Reset item
                                glbSourceProjects[i].isSelected    = true;

                                // Exit for loop j
                                break;
                            }
                        }
                    }
                }
            };



            var setComboboxCheckbox             = function( xStore, panelName ) {

                // PURPOSE: Create COMBOBOX for filtering items using checkboxes

                // Initiate variables
                var defaultText = '\u23AF' + ' ' + 'Make a selection' + ' ' + '\u23AF';

                // Set combobox width
                switch( panelName ) {

                    case 'panelCtrlBottomDelta_upper':

                        var comboWidth          = 95;

                        break;

                    default:

                        var comboWidth          = 126;

                        break;
                }

                // set Portfolio item mini-Store into Combobox
                var combobox    = Ext.widget({

                    xtype:              'combobox',

                    id:                 panelName + glbComboboxSuffix,

                    itemId:             panelName + glbComboboxSuffix,

                    width:              comboWidth,         //126,            //123,            //128,        //150,

                    padding:            '0 0 0 0',

                    margin:             '0 0 0 0',

                    matchFieldWidth:    false,
                    
                    store:              xStore,
                    
                    queryMode:          'local',

                    displayField:       'Name',

                    valueField:         'ObjectID',

                    emptyText:          defaultText,

                    valueNotFoundText:  defaultText,
                    
                    multiSelect:        true,
                    
                    tpl:                new Ext.XTemplate('<tpl for=".">', '<div class="x-boundlist-item">', '<input type="checkbox" />', '{Name}', '</div>', '</tpl>'),

                    listeners: {

                        select: function (combo, records) {

                            // Instantiate variables
                            var node;
                            var selectedRecs    = [];
                            
                            Ext.each(records, function (rec) {

                                node    = combo.getPicker().getNode(rec);
                                picker  = combo.getPicker();

                                Ext.get(node).down('input').dom.checked = true;

                                // Capture selected records
                                selectedRecs.push( rec );
                            });
                        },

                        beforedeselect: function( combo, rec, index ) {

                            var node = combo.getPicker().getNode(rec);

                            Ext.get(node).down('input').dom.checked = false;
                        },

                        change: function( combo, newValue, oldValue ) {

                            // Update Button Badge's text
                            var selectionCount  = combo.lastSelection.length;
                            setButtonBadgeText( panelName, selectionCount.toString() );

                            // Update Selected Source projects
                            switch( panelName ) {

                                case 'panelCtrlBottomDelta_upper':

                                    // Handle selected Source projects
                                    resetSelectedSourceProjects( newValue );
                            }
                        }
                    }
                });

                // Return comboBox reference
                return combobox;
            };



            var setComboboxLabel   = function( panelName ) {

                // PURPOSE: Instantiate combobox label used to select Portfolio Items

                // Initialize
                var comboboxLabelDisplay    = setControlPanelLabel( panelName );

                // Handle SOURCE label
                var lblCls          = glbPanel_config.lblCls;
                
                if ( panelName == 'panelCtrlBottomDelta_upper' ) {
        
                    lblCls          = glbPanel_config.almCls;
                }

                // set Portfolio item mini-Store into Combobox
                var comboboxLabel   = Ext.create('Ext.draw.Text', {

                    id:             panelName + glbComboboxLabelSuffix,

                    itemId:         panelName + glbComboboxLabelSuffix,

                    width:          61,                         //75,

                    margin:         '0 0 0 0',                  // top, right, bottom, left

                    padding:        '5 0 5 0',

                    componentCls:   lblCls,                     //cls:        glbPanel_config.lblCls,

                    text:           comboboxLabelDisplay + ':'

                });

                // Return comboBox reference
                return comboboxLabel;
            };



            var setComboboxStore                = function( pi_data, panelName ) {

                // PURPOSE: Requery STORE for use with COMBOBOX

                // Initialize variables
                var iStore          = [];
                var piModel         = '';
                var piArray         = [];
                var piUnique        = [];
                var piSortDir       = 'ASC';
                var bContinue       = false;

                // Handle Panels
                switch( panelName ) {

                    case 'panelCtrlBottomDelta_upper':

                        piArray             = getComboboxModel( glbSourceProjects, panelName );

                        bContinue           = true;

                        break;

                    case 'panelCtrlTopDelta_upper':

                        bContinue           = false;

                        break;

                    case 'panelCtrlBottomGamma_upper':

                        // Add Kanban States to model
                        for ( i = 0; i < pi_data.length; i++ ) {

                            // Build Model
                            piArray.push({

                                ObjectID:       pi_data[i].ObjectID,

                                Name:           pi_data[i].Name,

                                ShortName:      pi_data[i].OrderIndex,

                                SortAscend:     true

                            });
                        }

                        bContinue           = true;

                        break;

                    default:

                        // loop through all Portfolio Items
                        Ext.Array.each( pi_data, function( pi_record ) {

                            // Set Model
                            piModel         = getComboboxModel( pi_record, panelName );

                            Ext.Array.each( piModel, function( pi_mdl ) {

                                // Handle unique items ONLY
                                if ( piUnique.indexOf( pi_mdl.ObjectID ) == -1 ) {

                                    // Add unique item to array
                                    piUnique.push( pi_mdl.ObjectID );

                                    // Add item to array
                                    piArray.push( pi_mdl );
                                }

                                // Handle sort direction
                                if ( pi_mdl.SortAscend == false ) {

                                    piSortDir   = 'DESC';
                                }
                            });

                        });

                        bContinue           = true;

                        break;
                }

                // Handle building Store
                if ( bContinue ) {

                    // load Selected Portfolio item Data mini-Store
                    iStore = Ext.create('Ext.data.Store', {

                        autoLoad:       true,

                        fields:         [ 'ObjectID', 'Name', 'ShortName' ],

                        data:           piArray,

                        sorters: [{

                            property:   'ShortName',

                            direction:  piSortDir

                        }]

                    });

                }

//window.console && console.log ( "iStore:", iStore );

                return ( iStore );
            };



            var getComboboxModel                = function( pi_record, panelName ) {

                // PURPOSE: Fetch MODEL for use with COMBOBOX

                // Initialize temp variables
                var tempObjectID    = '';
                var tempName        = '';
                var tempShortName   = '';
                var model           = [];

                // Set variables
                switch( panelName ) {

                    case 'panelCtrlTopAlpha_upper':

                        // Populate combobox with Capabilities (Features)
                        tempObjectID    = pi_record.get('ObjectID');
                        tempName        = pi_record.get('FormattedID') + ": " + pi_record.get('Name');
                        tempShortName   = pi_record.get('Name');

                        model.push({

                            ObjectID:       tempObjectID,

                            Name:           tempName,

                            ShortName:      tempShortName,

                            SortAscend:     true

                        });

                        break;

                    case 'panelCtrlTopBeta_upper':

//window.console && console.log ( "pi_record.data.Project.Name:", pi_record.data.Project.Name );
//window.console && console.log ( "pi_record.data.Project:", pi_record.data.Project );

                        // Populate combobox with Product Categories (Project) items
                        if ( pi_record.data.Project.length !== 0 ) {

                            tempName        = pi_record.data.Project.Name;
                            tempShortName   = tempName;
                            tempObjectID    = pi_record.data.Project.ObjectID;

                        } else {

                            tempName        = glbEmptyValue;
                            tempShortName   = tempName;
                            tempObjectID    = tempName;
                        }

                        model.push({

                            ObjectID:       tempObjectID,

                            Name:           tempName,

                            ShortName:      tempShortName,

                            SortAscend:     true

                        });

                        break;

                    case 'panelCtrlTopCenter_upper':

                        // Populate combobox with Product Owning Trains (Project) items
                        if ( pi_record.data.c_OwningTrain.length !== 0 ) {

                            tempName    = pi_record.data.c_OwningTrain;

                        } else {

                            tempName    = glbEmptyValue;
                        }

                        tempShortName   = tempName;
                        tempObjectID    = tempName;

                        model.push({

                            ObjectID:       tempObjectID,

                            Name:           tempName,

                            ShortName:      tempShortName,

                            SortAscend:     true

                        });

                        break;

                    case 'panelCtrlTopGamma_upper':

                        // Populate combobox with Line-of-Businesss (LOB) items
                        if ( pi_record.data.c_LOB.Count > 0 ) {

                            // Loop through multiple LOBs
                            for ( var i = 0; i < pi_record.data.c_LOB.Count; i++ ) {

                                // Add item to temporary array
                                tempName        = pi_record.data.c_LOB._tagsNameArray[i].Name;
                                tempShortName   = tempName;
                                tempObjectID    = pi_record.data.c_LOB._tagsNameArray[i]._ref;

                                model.push({

                                    ObjectID:   tempObjectID,

                                    Name:       tempName,

                                    ShortName:  tempShortName,

                                    SortAscend: true

                                });
                            }

                        } else {

                            tempName            = glbEmptyValue;
                            tempShortName       = tempName;
                            tempObjectID        = tempName;

                            model.push({

                                ObjectID:   tempObjectID,

                                Name:       tempName,

                                ShortName:  tempShortName,

                                SortAscend: true
                            });
                        }

                        break;

                    case 'panelCtrlTopDelta_upper':

                        break;

                    case 'panelCtrlBottomAlpha_upper':

//window.console && console.log ( "pi_record.data.Release:", pi_record.data.Release );

                        // Populate combobox with existing Release items
                        if ( (pi_record.data.Release == '') || (pi_record.data.Release == null) ) {

                            tempName        = glbEmptyValue;
                            tempObjectID    = tempName;
                            tempShortName   = tempName;

                        } else {

                            //ReleaseDate

//window.console && console.log ( "pi_record.data.Release.ReleaseDate:", pi_record.data.Release.ReleaseDate );

                            var tempDate    = pi_record.data.Release.ReleaseDate;
                            var tempPos     = tempDate.indexOf('T');

                            //tempName        = pi_record.data.Release._refObjectName + ' - ' + tempDate.slice(0,tempPos) + ' - (' + pi_record.data.Release.ObjectID + ')';
                            tempName        = pi_record.data.Release._refObjectName + ' - ' + tempDate.slice(0,tempPos) + ' - (' + pi_record.data.Release.Project.Name + ')';
                            tempObjectID    = pi_record.data.Release.ObjectID;
                            tempShortName   = pi_record.data.Release.ReleaseDate;   // For sorting purposes ONLY
                        }

                        model.push({

                            ObjectID:       tempObjectID,

                            Name:           tempName,

                            ShortName:      tempShortName,

                            SortAscend:     false

                        });

                        break;

                    case 'panelCtrlBottomBeta_upper':

                        // Populate combobox with Product Owning Trains (Project) items
                        if ( pi_record.data.c_BuildEffort.length !== 0 ) {

                            tempName    = pi_record.data.c_BuildEffort;

                        } else {

                            tempName    = glbEmptyValue;
                        }

                        tempShortName   = tempName;
                        tempObjectID    = tempName;

                        model.push({

                            ObjectID:       tempObjectID,

                            Name:           tempName,

                            ShortName:      tempShortName,

                            SortAscend:     true

                        });

                        break;

                    case 'panelCtrlBottomCenter_upper':

                        // Populate combobox with existing Priority items
                        if ( (pi_record.data.c_PriorityLevel == '') || (pi_record.data.c_PriorityLevel == null) ) {

                            tempName        = glbEmptyValue;
                            tempObjectID    = tempName;
                            tempShortName   = tempName;

                        } else {

                            tempName        = pi_record.data.c_PriorityLevel;
                            tempObjectID    = pi_record.data.c_PriorityLevel;
                            tempShortName   = pi_record.data.c_PriorityLevel;   // For sorting purposes ONLY
                        }

                        model.push({

                            ObjectID:       tempObjectID,

                            Name:           tempName,

                            ShortName:      tempShortName,

                            SortAscend:     true

                        });

                        break;

                    case 'panelCtrlBottomGamma_upper':

                        // Populate combobox with existing Kanban State items
                        if ( pi_record.data.State == null ) {

                            tempName        = glbEmptyValue;
                            tempObjectID    = tempName;
                            tempShortName   = tempName;

                        } else {

                            tempName        = pi_record.data.State._refObjectName;
                            tempObjectID    = pi_record.data.State.ObjectID;
                            tempShortName   = tempName;                             // For sorting purposes ONLY

                        }

                        model.push({

                            ObjectID:       tempObjectID,

                            Name:           tempName,

                            ShortName:      tempShortName,

                            SortAscend:     true

                        });

                        break;

                    case 'panelCtrlBottomDelta_upper':

                        // Loop through Capability project Sources
                        for ( var i = 0; i < pi_record.length; i++ ) {

                            // Map global variable into Model array
                            model.push( pi_record[i] );
                        }

                        break;
                }

                // Return MODEL
                return ( model );

            };



            var resetControlPanelComboboxes     = function( panels ) {

                // PURPOSE: Reset Comboboxes to ALL items selected

                // Cycle through panels containing Comboboxes
                Ext.Array.each( panels, function( pnl ) {

//window.console && console.log ( "pnl:", pnl );

                    // Handle Combobox Panels ONLY
                    switch( pnl.itemId ) {

                        case 'panelCtrlTopAlpha_upper':

                        case 'panelCtrlTopBeta_upper':

                        case 'panelCtrlTopCenter_upper':

                        case 'panelCtrlTopGamma_upper':

                        case 'panelCtrlBottomAlpha_upper':

                        case 'panelCtrlBottomBeta_upper':

                        case 'panelCtrlBottomCenter_upper':

                        case 'panelCtrlBottomGamma_upper':

                            // Select all combobox items
                            toggleButtonComboSelect( pnl.itemId, true, true );

                            break;

                        case 'panelCtrlBottomDelta_upper':

                            // Handle SOURCES by resetting selected Project to Default Project atop permitted project hierarchy
                            toggleSourcesComboSelect( pnl.itemId );

                            break;

                        case 'panelCtrlTopDelta_upper':
                        default:

                            // Do nothing
                    }
                });
            };



            var getActiveControlPanels           = function() {

                // PURPOSE: Return array of active Panels

                var panels                      = [];
                var panelsUnique                = [];

                // Crawl all container layers
                if ( glbViewContainer.items.length > 0 ) {

                    // Populate Control panels
                    Ext.Array.each( glbViewContainer.items, function( viewItem ) {

                        // Set active flag for item
                        isItemActive            = false;

                        // Handle uniqueness - Is this Panel unique
                        if ( panelsUnique.indexOf( viewItem.itemId ) == -1 ) {

                            // Set Tab Panel
                            if ( viewItem.itemId == glbPanelTabItemId ) {

                                // Add item to detail array
                                panels.push( viewItem );

                                // Add item to uniqueness array
                                panelsUnique.push( viewItem.itemId );
                            }
                        }

                        // Initialize Layers
                        var panelLayers         = viewItem.items;

                        // Ensure this layer of items exists
                        if ( panelLayers.items.length > 0 ) {

                            // Loop through Panel Control sub-layers
                            Ext.Array.each( panelLayers.items, function( pnlLayer ) {

                                // Initialize Sub-Layers
                                var subPanelLayers  = pnlLayer.items;

                                // Ensure this layer of items exists
                                if ( subPanelLayers.items.length > 0 ) {

                                    // Loop through Panel Control sub-layers
                                    Ext.Array.each( subPanelLayers.items, function( pnlSubLayer ) {

                                        // Handle uniqueness - Is this Panel unique
                                        if ( panelsUnique.indexOf( pnlSubLayer.itemId ) == -1 ) {

                                            // Handle <<defined>> values ONLY
                                            if ( pnlSubLayer.itemId !== undefined ) {

                                                isItemActive    = true;

                                                // Add item to detail array
                                                panels.push( pnlSubLayer );

                                                // Add item to uniqueness array
                                                panelsUnique.push( pnlSubLayer.itemId );
                                            }
                                        }
                                    });
                                }
                            });
                        }
                    });
                }

                // Return array
                return( panels );

            };



            var setControlPanelLabel            = function( panelID ) {

                // PURPOSE: Set Combobox Label via Panel ID

                var comboLabelText              = '';

                switch( panelID ) {

                    case 'panelCtrlTopAlpha_upper':

                        comboLabelText          = "FEATURES";       //'CAPABILITIES';

                        break;

                    case 'panelCtrlTopBeta_upper':

                        comboLabelText          = "CAT'GRY";        //'CATEGORIES';

                        break;

                    case 'panelCtrlTopCenter_upper':

                        comboLabelText          = 'OWN TRAIN';

                        break;

                    case 'panelCtrlTopGamma_upper':

                        comboLabelText          = 'LOB';

                        break;

                    case 'panelCtrlTopDelta_upper':

                        comboLabelText          = 'UNITS (%)';

                        break;

                    case 'panelCtrlBottomAlpha_upper':

                        comboLabelText          = 'RELEASE';

                        break;

                    case 'panelCtrlBottomBeta_upper':

                        comboLabelText          = 'BUILD EFF';

                        break;

                    case 'panelCtrlBottomCenter_upper':

                        comboLabelText          = 'PRIORITY';

                        break;

                    case 'panelCtrlBottomGamma_upper':

                        comboLabelText          = 'STATE';

                        break;

                    case 'panelCtrlBottomDelta_upper':

                        comboLabelText          = 'SOURCE';

                        break;

                    default:

                        comboLabelText          = 'NO LABEL';

                        break;

                }

                // Return item
                return ( comboLabelText );

            };


            var setControlPanelToolbar          = function( piArray, activePanels ) {

                // PURPOSE: Initialize toolbar for use in configuration panel

                // Initialize variables
                var tbarObject                  = null;
                var tbarWidth                   = parseInt( glbPanel_config.panelWidth * glbFactorWidth );
                var tbarHeight                  = glbPanel_config.panelRowHeight;
                var bFlag                       = false;
                var comboLabelText              = '';

                // Enumerate through Active Panels
                Ext.Array.each( activePanels, function( subPanel ) {

                    // Set toolbar spacer
                    var panelSpacer             = Ext.create('Ext.toolbar.Spacer', {

                        id:             subPanel.itemId + '_panelSpacer',

                        width:          3

                    });

                    var itemSpacer              = Ext.create('Ext.toolbar.Spacer', {

                        id:             subPanel.itemId + '_itemSpacer',

                        width:          1

                    });

                    // Handle Tab Panel differently
                    if ( subPanel.itemId == glbPanelTabItemId ) {

                        // Configure Tab Panel
                        setTabPanelToolbar( subPanel );

                        // Toggle further processing
                        bFlag                   = false;

                    } else {

                        // Construct control object panel-by-panel
                        switch( subPanel.itemId ) {

                            case 'panelCtrlBottomGamma_upper':

                                // Set STORE
                                var uiStore             = setComboboxStore( glbStates, subPanel.itemId );


                                // Set COMBOBOX containing Portfolio Item selections setComboboxLabel
                                var combobox            = setComboboxCheckbox( uiStore, subPanel.itemId );

//window.console && console.log ( "combobox:", combobox );

                                // Set COMBOBOX label
                                var comboboxLabel       = setComboboxLabel( subPanel.itemId );

//window.console && console.log ( "comboboxLabel:", comboboxLabel );

                                // Set BUTTON
                                var btnSelectAll        = setButtonComboSelect( subPanel.itemId, true );
                                var btnSelectNone       = setButtonComboSelect( subPanel.itemId, false );

                                // Set array of Items
                                var allItems            = [

                                    comboboxLabel,

                                    combobox,

                                    panelSpacer,

                                    btnSelectAll,

                                    itemSpacer,

                                    btnSelectNone
                                ];

                                // Toggle further processing
                                bFlag                   = true;

                                break;

                            case 'panelCtrlTopAlpha_upper':

                            case 'panelCtrlTopBeta_upper':

                            case 'panelCtrlTopCenter_upper':

                            case 'panelCtrlTopGamma_upper':

                            case 'panelCtrlBottomAlpha_upper':

                            case 'panelCtrlBottomBeta_upper':

                            case 'panelCtrlBottomCenter_upper':

//window.console && console.log ( "piArray:", piArray );

                                // Set STORE
                                var uiStore             = setComboboxStore( piArray, subPanel.itemId );

//window.console && console.log ( "uiStore:", uiStore );

                                // Set COMBOBOX containing Portfolio Item selections setComboboxLabel
                                var combobox            = setComboboxCheckbox( uiStore, subPanel.itemId );

//window.console && console.log ( "combobox:", combobox );

                                // Set COMBOBOX label
                                var comboboxLabel       = setComboboxLabel( subPanel.itemId );

//window.console && console.log ( "comboboxLabel:", comboboxLabel );

                                // Set BUTTON
                                var btnSelectAll        = setButtonComboSelect( subPanel.itemId, true );
                                var btnSelectNone       = setButtonComboSelect( subPanel.itemId, false );

                                // Set array of Items
                                var allItems            = [

                                    comboboxLabel,

                                    combobox,

                                    panelSpacer,

                                    btnSelectAll,

                                    itemSpacer,

                                    btnSelectNone
                                ];

                                // Toggle further processing
                                bFlag                   = true;

                                break;

                            case 'panelCtrlTopDelta_upper':

                                // Set spacer Item
                                var thisSpacer          = Ext.create('Ext.toolbar.Spacer', {

                                    id:             subPanel.itemId + '_thisSpacer',

                                    width:          56      //78

                                });

                                // Set COMBOBOX label
                                var checkboxLabel       = setCheckboxLabel( subPanel.itemId );

                                // Set CHECKBOX label
                                var unitCheckbox        = setUnitCheckbox( subPanel.itemId );

                                // Set Reset button
                                var buttonReset         = setButtonReset( subPanel.itemId );

                                // Set Apply button
                                var buttonApply         = setButtonApply( subPanel.itemId );

                                // Set array of Items
                                var allItems            = [

                                    checkboxLabel,

                                    unitCheckbox,

                                    thisSpacer,

                                    buttonReset,

                                    panelSpacer,

                                    buttonApply
                                ];

                                // Toggle further processing
                                bFlag                   = true;

                                break;

                            case 'panelCtrlBottomDelta_upper':

                                // Set spacer Item
                                var thisSpacer          = Ext.create('Ext.toolbar.Spacer', {

                                    id:             subPanel.itemId + '_thisSpacer',

                                    width:          10      //78

                                });

//window.console && console.log ( "piArray:", piArray );

                                // Set STORE
                                var uiStore             = setComboboxStore( piArray, subPanel.itemId );

//window.console && console.log ( "uiStore:", uiStore );

                                // Set COMBOBOX containing Portfolio Item selections setComboboxLabel
                                var combobox            = setComboboxCheckbox( uiStore, subPanel.itemId );

//window.console && console.log ( "combobox:", combobox );

                                // Set COMBOBOX label
                                var comboboxLabel       = setComboboxLabel( subPanel.itemId );

//window.console && console.log ( "comboboxLabel:", comboboxLabel );

                                // Set COMBOBOX label
                                var checkboxLabel       = setCheckboxLabel( subPanel.itemId );

                                // Set CHECKBOX label
                                var unitCheckbox        = setUnitCheckbox( subPanel.itemId );

                                // Set BUTTON
                                var btnSelectAll        = setButtonComboSelect( subPanel.itemId, true );
                                var btnSelectNone       = setButtonComboSelect( subPanel.itemId, false );

                                // Set array of Items
                                var allItems            = [

                                    checkboxLabel,

                                    //unitCheckbox,
                                    
                                    thisSpacer,

                                    combobox,

                                    panelSpacer,

                                    btnSelectAll,

                                    itemSpacer,

                                    btnSelectNone
                                ];

                                // Toggle further processing
                                bFlag                   = true;

                                break;

                        }
                    }
    
                    // Perform further processing
                    if ( bFlag ) {

                        // Set toolbar object
                        tbarObject              = Ext.create('Ext.toolbar.Toolbar', {

                            height:         tbarHeight,

                            width:          tbarWidth,

                            margin:         '5 0 0 10',      // top, right, bottom, left

                            border:         false,

                            //componentCls:   glbPanel_controlToolbarConfig.txtCls,

                            items:          allItems

                        });

//window.console && console.log ( "tbarObject:", tbarObject );

                        // Set control panel dock item
                        var rtnObject               = [{

                            xtype:      'toolbar',

                            dock:       'top',

                            border:     false,

                            items:      tbarObject
                        }];

//window.console && console.log ( "rtnObject:", rtnObject );

                        // Remove all existing Panel objects
                        subPanel.removeAll( true );

                        // Set PANEL object
                        subPanel.add( rtnObject );

//window.console && console.log ( "subPanel:", subPanel );

                    }
                });
            };



            var setTabPanelToolbar      = function( panel ) {

                // PURPOSE: Add TabPanel to Toolbar
                //
                // NB: Applicable to panelTablTop ONLY

                // Initialize variables
                var tbarObject                  = null;
                var tbarWidth                   = parseInt( glbPanel_config.panelWidth * glbFactorWidth );
                var tbarHeight                  = parseInt( glbPanel_config.panelRowHeight * 10.0 );
                var tbarNumberTabs              = 4.0;
                var tbarTabWidth                = parseInt( (tbarWidth / tbarNumberTabs) + 6 );      //parseInt( (tbarWidth / tbarNumberTabs) + 6.6 );
                var tbarTabPanelNames           = [

                    'FEATURES',
                    'CATEGORIES',
                    'RELEASES',
                    'TRAINS'
                ];

                // Set tab Panel
                var tabPanel                    = Ext.create('Ext.tab.Panel', {

                    id:             panel.itemId + glbTabPanelSuffix,

                    itemId:         panel.itemId + glbTabPanelSuffix,

                    width:          glbPanel_config.panelWidth,         //tbarWidth,

                    margin:         '0 0 0 0',      // top, right, bottom, left

                    border:         false,

                    frame:          false,

                    disabled:       true,

                    activeTab:      0,

                    minTabWidth:    tbarTabWidth,

                    maxTabWidth:    tbarTabWidth,

                    cls:            glbPanel_config.tabCls,

                    componentCls:   glbPanel_config.tabCls,

                    renderTo:       'cmp',

                    items: [

                        {
                            title:          tbarTabPanelNames[0],

                            id:             panel.itemId + glbTabPanelSuffix + '_0',

                            itemId:         0,

                            autoWidth:      true

                            //height:         tbarHeight

                            //bodyPadding: 10,

                            //html :          'A simple tab'
                        },

                        {
                            title:          tbarTabPanelNames[1],

                            id:             panel.itemId + glbTabPanelSuffix + '_1',

                            itemId:         1,

                            autoWidth:      true

                            //height:         tbarHeight

                            //bodyPadding: 10,

                            //html : 'A simple tab'
                        },

                        {
                            title:          tbarTabPanelNames[2],

                            id:             panel.itemId + glbTabPanelSuffix + '_2',

                            itemId:         2,

                            autoWidth:      true

                            //height:         tbarHeight

                            //bodyPadding: 10,

                            //html : 'A simple tab'
                        },

                        {
                            title:          tbarTabPanelNames[3],

                            id:             panel.itemId + glbTabPanelSuffix + '_3',

                            itemId:         3,

                            autoWidth:      true

                            //height:         tbarHeight

                            //bodyPadding: 10,

                            //html : 'A simple tab'
                        }
                    ]
                });

                // Remove all existing Panel objects
                panel.removeAll( true );

                // Set PANEL object
                panel.add( tabPanel );

            };



            var getProjectSource        = function( proj_Tops ) {

                // PURPOSE: Return single top-of-the-hierarchy Project to be referenced as the
                //          primary place (Source) for finding Features to be identified as Capabilties

                var proj_Src            = [];

//window.console && console.log ( "proj_Tops:", proj_Tops );

                // Loop through all retrived top-of-hiearchy Projects
                Ext.Array.each( proj_Tops, function( proj ) {

//window.console && console.log ( "proj:", proj );

                    // Find project identfied as default
                    if ( proj.isDefault ) {

                        proj_Src.push( proj );

                        // Exit loop
                        return false;
                    }
                });

                // Return matching Project
                return( proj_Src );
            };



            var getStates_Kanban        = function() {

                // PURPOSE: Return all available Kanban States

                // Initialize variables
                var arr_Empty           = [];
                var arr_States          = [];
                var arr_Dupes           = [];

                // Setup Promises and Deferred
                var deferred            = Ext.create('Deft.Deferred');

                Ext.create('Rally.data.WsapiDataStore', {

                    model:      'State',

                    autoLoad:   true,

                    fetch:      ['ObjectID', 'Name', 'Description', 'OrderIndex'],

                    listeners: {

                        load: function( store, state_data, success ) {

                            if ( success ) {

                                // Handle existing States ONLY
                                if ( state_data.length > 0 ) {

                                    // Loop through all valid States
                                    Ext.Array.each( state_data, function( state ) {

                                        // Handle unique items ONLY
                                        if ( arr_Dupes.indexOf( state.data.Name ) == -1 ) {

                                            // Add item to Duplicates array
                                            arr_Dupes.push( state.data.Name );

                                            // Add record to target array
                                            arr_States.push( state.data );
                                        }
                                    });

                                    // Sort array by index value
                                    arr_States = arr_States.sort( function (a, b) {

                                        // Sort
                                        if ( a.OrderIndex < b.OrderIndex ) {

                                            return -1;
                                        } else if ( a.OrderIndex > b.OrderIndex ) {

                                            return 1;
                                        } else {

                                            return 0;
                                        }
                                    });
                                }

                                // Handle successful findings
                                deferred.resolve( arr_States );

                            } else {

                                // Handle unsuccessful findings
                                deferred.resolve( arr_Empty );
                            }
                        }
                    }
                });

                return deferred.promise;
            };



            var isUniqueSourceProject   = function( project ) {

                // PURPOSE: Return boolean indicating if project object is unique within global reference to Source Projects

                var bMatchFound         = true;

                // Enumerate through Project Sources
                for ( i = 0; i < glbSourceProjects.length; i++ ) {
                //Ext.Array.each( glbSourceProjects, function( srcs ) {

                    // Handle matches ONLY
                    if ( glbSourceProjects[i].ObjectID == project.ObjectID ) {

                        // Reset match bit
                        bMatchFound     = false;
                    }

//window.console && console.log ("glbSourceProjects[i].ObjectID:", glbSourceProjects[i].ObjectID);
//window.console && console.log ("project.ObjectID:", project.ObjectID);
//window.console && console.log ("bMatchFound:", bMatchFound);

                }

                // Return uniqueness flag
                return( bMatchFound );
            };



            var getSourceProjectDefault = function() {

                // PURPOSE: Get default Source Project

                // Enumerate through Project Sources
                Ext.Array.each( glbSourceProjects, function( srcs ) {

                    // Handle matches ONLY
                    if ( srcs.isDefault ) {

                        // Return match
                        return( srcs );
                    }
                });
            };



            var setSourceProjectDefault = function( projectID ) {

                // PURPOSE: Set Source Project with matching ObjectID as the default

                // Enumerate through Project Sources{}
                for ( i = 0; i < glbSourceProjects.length; i++ ) { 
                //Ext.Array.each( glbSourceProjects, function( src ) {

                    // Reset match bit
                    glbSourceProjects[i].isDefault  = false;

                    // Handle matches ONLY
                    if ( glbSourceProjects[i].ObjectID == projectID ) {

                        // Reset match bit
                        glbSourceProjects[i].isDefault  = true;
                    }

                    // Align Selected item with Default item
                    glbSourceProjects[i].isSelected = glbSourceProjects[i].isDefault;

                }
            };



            var addSourceProject        = function( project ) {

                // PURPOSE: Add unique project to global array of Source Projects

                var bMatchFound         = false;

                // Handle no matches ONLY
                if ( isUniqueSourceProject( project ) ) {

                    glbSourceProjects.push({

                        ObjectID:       project.ObjectID,

                        Name:           project.Name,

                        ShortName:      project.Name,

                        SortAscend:     true,

                        _ref:           project._ref,

                        isDefault:      false,

                        isSelected:     false
                    });

                    bMatchFound         = true;
                }

                // Return indicator of setting success
                return( bMatchFound );
            };



            var getSourceProjectNames   = function( currProj ) {

                // PURPOSE: Return delimted string of currently selected Source Project names

                // Initialize counter
                var srcCount            = 0;
                var srcNames            = '';

                // Handle empty array
                if ( glbSourceProjects.length < 1 ) {

                    // Return current project name
                    return( currProj.Name );
                }

                // Enumerate through Project Sources
                Ext.Array.each( glbSourceProjects, function( src ) {

                    // Append delimeter if looping multiple times
                    if ( srcCount > 0 ) {

                        // Append Name string
                        srcNames        = srcNames + ' ' + '\u22C5' + ' ';
                    }

                    // Handle matches ONLY
                    if ( src.isSelected ) {

                        // Reset match bit
                        srcNames        = srcNames + src.Name;

                        // Increment counter
                        srcCount++;
                    }
                });

                // Return value
                return( srcNames );
            };


            var getProjectsAllAtop      = function() {

                // PURPOSE: Return all available projects sitting atop the project hierarchy (no Parents)

                // Initialize variables
                var proj_Empty          = [];
                var proj_Atop           = [];
                var bSetDefault         = false;

                // Setup Promises and Deferred
                var deferred            = Ext.create('Deft.Deferred');

                // Build filter on Current User
                var proj_Filter         = Ext.create('Rally.data.QueryFilter', {

                    property:   'Parent',

                    operator:   '=',

                    value:      null
                });

                Ext.create('Rally.data.WsapiDataStore', {

                    model:      'Project',

                    autoLoad:   true,

                    fetch:      ['ObjectID', 'Name', 'Description', 'Owner', 'Parent', 'Children', 'State'],

                    filters:    proj_Filter,

                    listeners: {

                        load: function( store, proj_data, success ) {

                            if ( success ) {

                                // Handle existing Projects ONLY
                                if ( proj_data.length > 0 ) {

                                    // Create counter to track when default Project has been set
                                    var counter_SetDefault      = 0;

                                    // Loop through all retrieved top-of-hiearchy Projects
                                    Ext.Array.each( proj_data, function( proj ) {

                                        // Determine if original default matches an available/permissioned Project
                                        if ( proj.data.ObjectID == glbSelectedProjectID ) {

                                            bSetDefault     = true;

                                            counter_SetDefault++;
                                        
                                        } else {

                                            bSetDefault     = false;
                                        }

                                        // Create object list of top hierachical projects
                                        proj_Atop.push({

                                            ObjectID:       proj.data.ObjectID,

                                            Name:           proj.data.Name,

                                            ShortName:      proj.data.Name,

                                            SortAscend:     true,

                                            _ref:           proj.raw._ref,

                                            isDefault:      bSetDefault,

                                            isSelected:     bSetDefault

                                        });
                                    });

                                    // Handle users w/o permission to view the original default Project
                                    if ( counter_SetDefault == 0 ) {

                                        // Randomly set default Project to first Project in array
                                        proj_Atop[0].isDefault  = true;

                                        // Selection aligns with default setting
                                        proj_Atop[0].isSelected = true;

                                        // Reset global default Project ID
                                        glbSelectedProjectID       = proj_Atop[0].ObjectID;                                    
                                    }
                                }

                                // Handle successful findings
                                deferred.resolve( proj_Atop );

                            } else {

                                // Handle unsuccessful findings
                                deferred.resolve( proj_Empty );
                            }
                        }
                    }
                });

                return deferred.promise;

            };


            var artifactRenderer            = function( value,metadata,record,row,column,store,view ) {

                // PURPOSE: Enable artifact to be a link

                var tag     = '';

                if ( value !== null ) {

                    var urlVal  = Rally.nav.Manager.getDetailUrl(value._ref);
                    var tag = '<A TARGET="_top" HREF = "' + urlVal + '">' + value.FormattedID + ': ' + value.Name + '</A>';
                }

                return tag;

            };


            var zeroBlankRenderer           = function( value,metadata,record,row,column,store,view ) {

                // PURPOSE: Replace blank values with the system settign for missing values it enble sorting

                var tag     = '';

                if ( value !== 0 ) {

                    tag     = value;
                }

                return tag;

            };



            var blankItemRenderer           = function( value,metadata,record,row,column,store,view ) {

                // PURPOSE: Replace blank values with the system settign for missing values it enble sorting

                var tag     = '';

                if ( ( value == '' ) || ( value == null ) || (value == undefined ) ) {

                    tag     = glbEmptyValue;
                
                } else {

                    tag     = value;

                }

                return tag;

            };



            var makeGrid_Capabilities       = function( records ) {

                // Initialize variables
                var storeRecs               = [];

                // Set custom Model for Capabilities
                Ext.Array.each( records, function( rec ) {

                    // Handle missing group value
                    var groupValue          = rec.data.Project.Name
                    if ( ( groupValue == null ) || ( groupValue == undefined ) ) {

                        groupValue          = glbEmptyValue
                    }

                    // Handle Predecessors
                    var displayPredecessors = 0;
                    if ( ( rec.data.Predecessors !== null ) && ( rec.data.Predecessors !== undefined ) && ( rec.data.Predecessors !== '' ) ) {

                        displayPredecessors = rec.data.Predecessors.Count;
                    }

                    // Handle Successors
                    var displaySuccessors   = 0;
                    if ( ( rec.data.Successors !== null ) && ( rec.data.Successors !== undefined ) && ( rec.data.Successors !== '' ) ) {

                        displaySuccessors   = rec.data.Successors.Count;
                    }

                    // Handle Owning Train
                    var displayOwningTrain  = glbEmptyValue;
                    if ( rec.data.c_OwningTrain !== '' ) {

                        displayOwningTrain  = rec.data.c_OwningTrain;
                    }

                    // Handle LOB
                    var displayLOB          = glbEmptyValue;
                    if ( rec.data.c_LOB.Count > 0 ) {

                        // Clear LOB
                        displayLOB          = '';

                        // Loop through multiple LOBs
                        for ( var i = 0; i < rec.data.c_LOB.Count; i++ ) {

                            // Conditionally add CRLF
                            if ( i > 0 ) {

                                displayLOB  = displayLOB + ' ' + '\u22C5' + ' ';
                            }

                            displayLOB      = displayLOB + rec.data.c_LOB._tagsNameArray[i].Name;
                        }
                    }

                    // Handle Build Effort
                    var displayBuildEffort  = glbEmptyValue;
                    if ( rec.data.c_BuildEffort !== '' ) {

                        displayBuildEffort  = rec.data.c_BuildEffort;
                    }

                    // Handle State
                    var displayState        = glbEmptyValue;
                    if ( rec.data.State !== null ) {

                        displayState        = rec.data.State._refObjectName;
                    }

                    // Release
                    var displayRelease      = glbEmptyValue;
                    if ( (rec.data.Release !== '') && (rec.data.Release !== null) ) {

                        var tempDate        = '-missing date-';
                        if ( ( rec.data.Release.ReleaseDate !== null ) && ( rec.data.Release.ReleaseDate !== undefined ) ) {

                            tempDate        = rec.data.Release.ReleaseDate;

                            var tempPos     = tempDate.indexOf('T');                            
                            tempDate        = tempDate.slice(0,tempPos);
                        }

                        var releaseProject  = '-missing Release Project-';
                        if ( ( rec.data.Release.Project.Name !== null ) && ( rec.data.Release.Project.Name !== undefined ) ) {

                            releaseProject  = rec.data.Release.Project.Name;
                        }

                        displayRelease      = rec.data.Release._refObjectName + ' - [' + tempDate + '] - (' + releaseProject + ')';
                    }

                    // Build records for Store
                    storeRecs.push({

                        PeristedRank:   0,

                        Rank:           rec.data.DragAndDropRank,

                        Priority:       rec.data.c_PriorityLevel,

                        Predecessors:   displayPredecessors,

                        Successors:     displaySuccessors,

                        Capability:     rec.data,

                        Category:       rec.data.Project.Name,

                        OwnTrain:       displayOwningTrain,

                        LOB:            displayLOB,

                        BuildEffort:    displayBuildEffort,

                        State:          displayState,

                        Release:        displayRelease,

                        SortName:       rec.data.Name,

                        GroupName:      groupValue

                    });
                });

                // Persist Rally Rank
                storeRecs                       = sortGridRecordsByRank( storeRecs );

                // Set Store
                var gridStore                   = Ext.create('Ext.data.Store', {

                    autoLoad:       true,

                    fields:         [
                                        'PeristedRank',
                                        'Priority',
                                        'Predecessors',
                                        'Successors',
                                        'Capability',
                                        'Category',
                                        'OwnTrain',
                                        'LOB',
                                        'BuildEffort',
                                        'State',
                                        'Release',
                                        'GroupName',
                                        'SortName'
                                    ],

                    data:           storeRecs,

                    pageSize:       storeRecs.length,

                    sorters: [{

                        property:   'SortName',

                        direction:  'ASC'

                    }]

                });

                // Set standard colun width
                var colWidthStandard    = 150;

                // Set grid
                gridPlate = Ext.create('Rally.ui.grid.Grid', {

                    id:             'grid_0',

                    itemId:         'grid_0',

                    height:         400,

                    padding:        '15 0 0 0',        // top, left, right, bottom

                    autoScroll:     false,

                    store:          gridStore,

                    columnLines:    true,
/*
                                    'FormattedID',
                                    'Name',
                                    'ObjectID',
                                    'PortfolioItemType',
                                    'Rank',
                                    'PortfolioItemTypeName',
                                    'Project',
                                    'State',
                                    'Release',
                                    'ReleaseDate',
                                    'Predecessors',
                                    'Successors',
                                    'DragAndDropRank',
                                    'c_BuildEffort',
                                    'c_LOB',
                                    'c_OwningTrain',
                                    'c_PriorityLevel'

*/
                    columnCfgs: [

                        {

                            text:       'Rank',
                            dataIndex:  'PeristedRank',
                            minWidth:   50,
                            maxWidth:   50,
                            sortable:   true,
                            hideable:   false

                        },

                        {

                            text:       'Priority Level',
                            dataIndex:  'Priority',
                            minWidth:   90,
                            maxWidth:   90,
                            sortable:   true,
                            hideable:   true,
                            renderer:   blankItemRenderer

                        },

                        {

                            text:       'Capability',
                            dataIndex:  'Capability',
                            minWidth:   325,
                            maxWidth:   325,
                            sortable:   true,
                            hideable:   true,
                            renderer:   artifactRenderer

                        },

                        {

                            text:       'Predecessors',
                            dataIndex:  'Predecessors',
                            minWidth:   100,
                            maxWidth:   100,
                            sortable:   true,
                            hideable:   true

                        },

                        {

                            text:       'Successors',
                            dataIndex:  'Successors',
                            minWidth:   100,
                            maxWidth:   100,
                            sortable:   true,
                            hideable:   true

                        },

                        {

                            text:       'Category',
                            dataIndex:  'Category',
                            minWidth:   220,
                            maxWidth:   220,
                            sortable:   true,
                            hideable:   true

                        },

                        {

                            text:       'Owning Train',
                            dataIndex:  'OwnTrain',
                            minWidth:   colWidthStandard,
                            maxWidth:   colWidthStandard,
                            sortable:   true,
                            hideable:   true

                        },

                        {

                            text:       'LOB',
                            dataIndex:  'LOB',
                            minWidth:   parseInt( colWidthStandard * 0.60 ),
                            maxWidth:   parseInt( colWidthStandard * 0.60 ),
                            sortable:   true,
                            hideable:   true

                        },

                        {

                            text:       'Build Effort',
                            dataIndex:  'BuildEffort',
                            minWidth:   parseInt( colWidthStandard * 0.60 ),
                            maxWidth:   parseInt( colWidthStandard * 0.60 ),
                            sortable:   true,
                            hideable:   true

                        },

                        {

                            text:       'State',
                            dataIndex:  'State',
                            minWidth:   parseInt( colWidthStandard * 0.60 ),
                            maxWidth:   parseInt( colWidthStandard * 0.60 ),
                            sortable:   true,
                            hideable:   true

                        },

                        {

                            text:       'Release',
                            dataIndex:  'Release',
                            minWidth:   parseInt( colWidthStandard * 0.60 ),
                            maxWidth:   parseInt( colWidthStandard * 0.60 ),
                            sortable:   true,
                            hideable:   true

                        },

                        {

                            text:       '',
                            dataIndex:  'GroupName',
                            minWidth:   10,
                            maxWidth:   10,
                            sortable:   true,
                            hideable:   true,
                            hidden:     true

                        }
                    ]
                });

                // Return Grid
                return( gridPlate );

            };


            var renderGrid_Capabilities     = function( grid, panelItemId ) {

                // PURPOSE: Show Grid in Panel

                // Set Sub Panel Export Grid
                var subPanelButton          = setButtonExportGrid( grid, panelItemId );

                // Fetch Tab Panel container
                var subPanelItemId          = panelItemId + glbTabPanelSuffix + '_0';
                var subPanel                = Ext.getCmp( subPanelItemId );

                // Remove all existing Panel objects
                subPanel.removeAll();

                // Add PANEL objects
                subPanel.add( subPanelButton );
                subPanel.add( grid );
            };



            var makeGrid_Categories                 = function( records, pivotNames ) {

                // PURPOSE: Return Grid configured for AETNA Categories pivot table

                // Initialize variables
                var storeRecs                       = [];

                // Get Pivot Table arrays
                var pivotArrays                     = getPivotArray( records, pivotNames );

                // Get store populated using raw data, pivot configurations
                var pivotStore                      = getPivotStore( records, pivotArrays );

                // Get grid pupulated using pivot configurations
                var pivotGrid                       = getPivotGrid( pivotStore, pivotArrays );

                // Return Grid
                return( pivotGrid );
            };



            var renderGrid_Categories       = function( grid, panelItemId ) {

                // PURPOSE: Show Grid in Panel

                // Set Sub Panel Export Grid
                var subPanelButton          = setButtonExportGrid( grid, panelItemId );

                // Fetch Tab Panel container
                var subPanelItemId          = panelItemId + glbTabPanelSuffix + '_1';
                var subPanel                = Ext.getCmp( subPanelItemId );

                // Remove all existing Panel objects
                subPanel.removeAll();

                // Add PANEL objects
                subPanel.add( subPanelButton );
                subPanel.add( grid );
            };



            var getPivotGrid                    = function( storeRecs, pivotArrays ) {

                // PURPOSE: Return Grid created using pivot-table column-heading configuration

                // Initialize variables
                var pivotGridID                 = 'grid_1';
                var pivotColWidth               = 0;
                var colWidthStandard            = 65;

                var pivotFields                 = [];
                var colCfgs                     = [];

                // Set pivot configuration
                var pivotCfg                    = getPivotCfg( pivotArrays );

//window.console && console.log ( "pivotCfg", pivotCfg );

                // Enumerate pivot configuraton
                for ( var objKey in pivotCfg ) {

                    // Check if key exists in the obj
                    if ( pivotCfg.hasOwnProperty( objKey ) ) {

                        // Set field array using pivot column heads
                        pivotFields.push( objKey );

//window.console && console.log ( "objKey", objKey );

                        // Handle column width
                        switch( objKey ) {

                            case 'Category':

                                pivotColWidth   = 220;
                                break;

                            default:

                                pivotColWidth   = colWidthStandard;
                                break;
                        }

                        // Set column configuration for grid
                        colCfgs.push(

                            {

                                text:       objKey,
                                dataIndex:  objKey,
                                minWidth:   pivotColWidth,
                                maxWidth:   pivotColWidth,
                                sortable:   true,
                                hideable:   false,
                                renderer:   zeroBlankRenderer
                            }
                        );

                    }

//window.console && console.log ( "pivotFields", pivotFields );
//window.console && console.log ( "colCfgs", colCfgs );

                }

                // Set Store
                var gridStore                   = Ext.create('Ext.data.Store', {

                    autoLoad:       true,

                    fields:         pivotFields,

                    data:           storeRecs,

                    pageSize:       storeRecs.length

/*
                    sorters: [{

                        property:   'SortName',

                        direction:  'ASC'

                    }]
*/
                });

                // Set grid
                gridPlate = Ext.create('Rally.ui.grid.Grid', {

                    id:             pivotGridID,

                    itemId:         pivotGridID,

                    height:         400,

                    padding:        '15 0 0 0',        // top, left, right, bottom

                    autoScroll:     false,

                    store:          gridStore,

                    columnLines:    true,

                    columnCfgs:     colCfgs
                    
                });

                // Return Grid
                return( gridPlate );

            };



            var getPivotStore               = function( records, pivotArrays ) {

                // PURPOSE: Return Store created using pivot-table column-heading configuration

//window.console && console.log ( "pivotArrays", pivotArrays );

                // Initialize
                var storeRecs               = [];

                // Re-sort data records in order of Categories
                records = records.sort( function (a, b) {

                    if ( a.Category < b.Category ) {

                        return -1;

                    } else if ( a.Category > b.Category ) {

                        return 1;

                    } else {

                        return 0;
                    }
                });


                // ForEach Category (pivot of Category)
                var arrayCategory                           = pivotArrays[ 'Project' ];

//window.console && console.log ( "arrayCategory", arrayCategory );

                // Enumerate pivot Categories
                for ( i = 0; i < arrayCategory.length; i++ ) {

//window.console && console.log ( "arrayCategory[i]", arrayCategory[i] );

                    // Set reference to new Store item
                    var newStoreItem                        = getPivotCfg( pivotArrays );

                    // Set Store item CATEGORY value
                    newStoreItem[ 'Category' ]              = arrayCategory[i];

                    // Enumerate data records
                    for ( j = 0; j < records.length; j++ ) {

//window.console && console.log ( "records[j]", records[j] );

                        // Set Store item CATEGORY
                        var thisCategory                    = glbEmptyValue;
                        //var thisCategory    = records[j].data.Project;

                        if ( (records[j].data.Project !== '') && (records[j].data.Project !== undefined) && (records[j].data.Project !== null) ) {

                            thisCategory                    = records[j].data.Project.Name;
                        }

//window.console && console.log ( "thisCategory", thisCategory );

                        // Handle matching Categories ONLY
                        if ( thisCategory == arrayCategory[i] ) {

                            // Handle OWNING TRAIN pivot value
                            var thisOwningTrain             = "No Owner"

                            if ( (records[j].data.c_OwningTrain !== '') && (records[j].data.c_OwningTrain !== undefined) && (records[j].data.c_OwningTrain !== null) ) {

                                // Consider special handling
                                thisOwningTrain             = records[j].data.c_OwningTrain;
                            }

//window.console && console.log ( "thisOwningTrain", thisOwningTrain );
//window.console && console.log ( "newStoreItem[ thisOwningTrain ]", newStoreItem[ thisOwningTrain ] );

                            // Increment OWNING TRAIN store item count
                            newStoreItem[ thisOwningTrain ] = parseInt( newStoreItem[ thisOwningTrain ] + 1 );

                            // Increment TOTAL store item count
                            newStoreItem[ 'Total' ]         = parseInt( newStoreItem[ 'Total' ] + 1 );

                            // Handle KANBAN STATE pivot value
                            var thisKanbanState             = glbEmptyValue;

                            if ( (records[j].data.State !== '') && (records[j].data.State !== undefined) && (records[j].data.State !== null) ) {

                                // Consider special handling
                                thisKanbanState             = records[j].data.State.Name;
                            }

//window.console && console.log ( "thisOwningTrain", thisOwningTrain );
//window.console && console.log ( "newStoreItem[ thisOwningTrain ]", newStoreItem[ thisOwningTrain ] );

                            // Increment OWNING TRAIN store item count
                            newStoreItem[ thisKanbanState ] = parseInt( newStoreItem[ thisKanbanState ] + 1 );
                        }
                    }

                    // Build records for Store
                    storeRecs.push( newStoreItem );

//window.console && console.log ( "newStoreItem", newStoreItem );

                }

//window.console && console.log ( "storeRecs", storeRecs );

                // Return Store
                return( storeRecs );
            };




            var getPivotCfg                 = function( pivotArrays ) {

                // PURPOSE: Return order-specific Column Configuration for Pivot Table

                var pivotCfg                = {};

                // Add CATEGORY pivot column
                pivotCfg['Category']        = '';

                // Add OWNING TRAIN pivot columns
                var pvArray                         = pivotArrays['c_OwningTrain'];
                for ( var i = 0; i < pvArray.length; i++ ) {

                    // Add column configurations
                    pivotCfg[ pvArray[i] ]  = 0;
                }

                // Add TOTAL column
                pivotCfg['Total']           = 0;

                // Add KANBAN STATE pivot columns
                var pvArray                         = pivotArrays['States'];
                for ( var i = 0; i < pvArray.length; i++ ) {

                    // Add column configurations
                    pivotCfg[ pvArray[i] ]  = 0;
                }

                // Return Column COnfiguration\
                return( pivotCfg );
            };



            var getPivotArray               = function( records, pivotNames ) {

                // PURPOSE: Return Pivot Table arrays

                // Initialize variables
                var pivotArrays             = {};

                // Handle pivot names
                for ( var i = 0; i < pivotNames.length; i++ ) {

                    // Handle non-State pivots ONLY
                    switch( pivotNames[i] ) {

                        case 'States':

                            // Special Handling for State pivot column(s)
                            glbStates = glbStates.sort( function (a, b) {

                                if ( a.OrderIndex < b.OrderIndex ) {

                                    return -1;

                                } else if ( a.OrderIndex > b.OrderIndex ) {

                                    return 1;

                                } else {

                                    return 0;
                                }
                            });

                            // Populate in Order
                            var pvArray     = [];

                            // Add previously retrieved items to temporary array
                            for ( var j = 0; j < glbStates.length; j++ ) {

                                pvArray.push( glbStates[j].Name );
                            }

                            // Add array to Pivot Object using special handling
                            pivotArrays[ pivotNames[i] ]  = pvArray;

                            break;

                        default:

                            // Add array to Pivot Object using customary handling
                            pivotArrays[ pivotNames[i] ]  = setPivotArray( records, pivotNames[i] );

                            break;
                    }
                }

                // Return Pivot Arrays
                return( pivotArrays );
            };



            var setPivotArray               = function( records, pivotName ) {

                // PURPOSE: Return array of data pivoted to create Rows or Columns

                // Initialize variables
                var bSpecialHandling        = false;
                var emptyArray              = [];
                var pivotArray              = [];

                // Handle valid records with validated field names ONLY
                if ( records.length > 0 ) {

                    // Cycle through records to establish uniqueness arrays
                    Ext.Array.each( records, function( rec ) {

                        // Fetch value
                        var thisName        = rec.get( pivotName );

                        // Apply special handling
                        switch( pivotName ) {

                            case 'Project':

                                // Reset Name
                                if ( thisName !== null ) {

                                    thisName            = thisName.Name;
                                }

                                bSpecialHandling    = false;

                                break;

                            case 'c_OwningTrain':

                                bSpecialHandling    = true;

                                break;

                        }

                        // Update array items
                        pivotArray                  = setUniqueArray( pivotArray, thisName, bSpecialHandling );
                    });
                } 

                // Return pivoted array
                return( pivotArray );
            };



            var setUniqueArray              = function( uniqueArray, item, bApplyCustomEmpty ) {

                // PURPOSE: Return array with unique items added and sorted

                // Trap for non-value items
                if ( (item == '') || (item == undefined) || (item == null) ) {

                    // Handle standard empty value
                    item = glbEmptyValue;

                    // Apply customize string indicating empty value
                    if ( bApplyCustomEmpty ) {

                        item                = 'No Owner';
                    }
                }

                // Handle uniqueness
                if ( uniqueArray.indexOf( item ) == -1 ) {

                    // Add item to uniqueness array
                    uniqueArray.push( item );
                }

                // Sort array
                uniqueArray.sort(function( a, b ) {

                    if ( a < b ) {

                        return -1;

                    } else if ( a > b ) {

                        return 1;

                    } else {

                        return 0;
                    }

                });


                // Return updated array
                return( uniqueArray );
            };



            var bIsFieldNameValid           = function( pi_Store, fieldName ) {

                // PURPOSE: Return boolean indicating <fieldName> is a valid member within the <store>

                // Initialize
                var bFlag                   = false;

                // Handle existing arrays ONLY
                if ( pi_Store.length > 0 ) {

                    var stores              = pi_Store[0].stores;

                    // Collect fields withn Store
                    var store               = pi_Store[0].store;
                    var fields              = pi_Store[0].store.fetch;

                    // Handle existing fields ONLY
                    if ( fields.length > 0 ) {

                        // Cycle through array's Store to fetch fields
                        Ext.Array.each( fields, function( fld ) {

window.console && console.log ( "fld:", fld );

                            // Test field's existence in array Store
                            if ( fld == fieldName ) {

                                bFlag       = true;
                            }
                        });                        
                    }
                }

                // Return boolean
                return ( bFlag );
            };



            var sortGridRecordsByRank       = function( records ) {

                // PURPOSE: Persist Rally Drag and Drop Ranking
                records.sort(function( a, b ) {

                    if ( a.Rank < b.Rank ) {

                        return -1;

                    } else if ( a.Rank > b.Rank ) {

                        return 1;

                    } else {

                        return 0;
                    }

                });

window.console && console.log ("records - Sorted ...", records);

                // preserve sort order in Grid
                for (var i = records.length - 1; i >= 0; i -= 1) {
                    
                    records[i].PeristedRank = i+1;
                }

                // Return sorted array
                return( records );
            };



            var getCapabilityProject        = function() {

                // PURPOSE: Return project folder object reflecting the location of the AETNA Capabilities

                // Initialize variables
                var selectedProjects        = [];

                // Loop through all SourceProjects
                for ( i = 0; i < glbSourceProjects.length; i++ ) {

                    // Test Project for match
                    if ( glbSourceProjects[i].ObjectID == glbCapabilityProjectID ) {

                        // Add current SourceProject to return array
                        selectedProjects.push( glbSourceProjects[i] );
                    }
                }

                // Return array
                return( selectedProjects );
            };



            var getSelectedProjects         = function() {

                // PURPOSE: Return array of currently selected Source Projects

                // Initialize variables
                var selectedProjects        = [];

                // Loop through all SourceProjects
                for ( i = 0; i < glbSourceProjects.length; i++ ) {

                    // Test Project for being selected
                    if ( glbSourceProjects[i].isSelected ) {

                        // Add current SourceProject to return array
                        selectedProjects.push( glbSourceProjects[i] );
                    }
                }

                // Return array
                return( selectedProjects );
            };


            var removeActivePanelItemId     = function( activePanels, panelItemId ) {

                // PURPOSE: Remove Panels matching panelItemId input parameter from reset re-calculation

                // Find and remove panel Item Id from active panels array
                for ( var i = 0; i < activePanels.length; i++ ) {

                   if ( activePanels[i].itemId === panelItemId ) {

                     activePanels.splice( i, 1); 
                   }
                }
            };



            var resetControlPanel       = function( arr_Capabilities ) {

                // PURPOSE: Reset Control Panel(s) with newly found Capabilities

                // Remove Source Panel from reset re-calculation
                removeActivePanelItemId( glbComboboxPanels, glbPanelSourceItemId );

                // Remove Tab Panel from reset re-calculation
                removeActivePanelItemId( glbComboboxPanels, glbPanelTabItemId );

                // Populate Control Panels
                setControlPanelToolbar( arr_Capabilities, glbComboboxPanels );

                // Reset combobxes
                resetControlPanelComboboxes( glbComboboxPanels );
            };



            var reapplyCapabilities     = function( selectedProjects, capableProject ) {

                // PURPOSE: Reset selection of Capabilities based upon the current selection set of valid Projects
                //
                //      where:  input value <selectedProjects> is an array of Projects initialized by the getSelectedProjects() function
                //              input value <capableProject> is the project folder containing Feaures identified as AETNA Strategic initiaives

                // Initialize variables
                var arr_Empty           = [];
                var arr_Capabilities    = [];
                var arr_HashIDs         = [];
                var counter             = 0;

                // Start timer
                glbProgressBarTotal     = 0.0;
                var msgText             = 'Resetting Features ... ';
                var timerInterval       = setInterval(function () { refreshTimerBar( glbProgressBar, 0.01, msgText, ' secs', false ) }, 1000);

                // Setup Promises and Deferred
                var deferred            = Ext.create('Deft.Deferred');

//window.console && console.log ( "selectedProjects:", selectedProjects );

                // Handle existing SourceProjects ONLY
                if ( selectedProjects.length > 0 ) {

                    // Loop through each selected Project
                    for ( i = 0; i < selectedProjects.length; i++ ) {

                        // Find AETNA Capabilities
                        getFeaturesOfInterest_AETNA( selectedProjects[i], capableProject ).then({

                            success: function( array ) {

window.console && console.log ( "array:", array );
//window.console && console.log ( "i, selectedProjects.length:", i, selectedProjects.length );

                                if ( array.length == 0 ) {

                                    // Increment counter even though array was empty
                                    counter++;

                                    // Ready!
                                    if ( counter == selectedProjects.length ) {

                                        // Stop timer
                                        clearInterval( timerInterval );         // Stop interval
                                        refreshTimerBar( glbProgressBar, '', '', '', true );

                                        // Handle successful findings
                                        deferred.resolve( arr_Capabilities );
                                    }

                                } else {

                                    // Loop through each selected Project
                                    for ( j = 0; j < array.length; j++ ) {

                                        // Add found Capabilities to Capabilities array
                                        arr_Capabilities.push( array[j] );

//window.console && console.log ( "i, selectedProjects.length, j, arr_Capabilities.length:", i, selectedProjects.length, j, arr_Capabilities.length );

                                        //Test readiness
                                        if ( (i >= selectedProjects.length-1) && (j >= array.length-1) ) {

//window.console && console.log ( "arr_Capabilities:", arr_Capabilities.length );

                                            // Increment counter
                                            counter++;

                                            // Ready!
                                            if ( counter == selectedProjects.length ) {

//window.console && console.log ( "Ready?:", ( (i >= selectedProjects.length-1) && (j >= array.length-1) ), counter );

                                                // Stop timer
                                                clearInterval( timerInterval );         // Stop interval
                                                refreshTimerBar( glbProgressBar, '', '', '', true );

                                                // Handle successful findings
                                                deferred.resolve( arr_Capabilities );
                                            }
                                        }
                                    }
                                }
                            },

                            error: function() {

                                // Stop timer
                                clearInterval( timerInterval );         // Stop interval
                                refreshTimerBar( glbProgressBar, '', '', '', true );

                                // Handle successful findings
                                deferred.resolve( arr_Empty );
                            }
                        });
                    }
                
                } else {

                    // Stop timer
                    clearInterval( timerInterval );         // Stop interval
                    refreshTimerBar( glbProgressBar, '', '', '', true );

                    // Handle unsuccessful findings
                    deferred.resolve( arr_Empty );
                }

                return deferred.promise;

            };



            var executeStatus               = function( pi_Capabilities, activePanels ) {

                // PURPOSE: Execute project status

                // Instantiate pivot names (first record (0) is Row, all others (1 ... n) are Columns )
                var pivotNames              = [

                    'Project',

                    'c_OwningTrain',

                    'States'
                ];

                // Apply all Control Filters

                // Persist Ranking

                // Enable Tab Panel
                var tabPanel                = Ext.getCmp( glbPanelTabItemId + glbTabPanelSuffix );
                if ( tabPanel.disabled ) {

                    tabPanel.setDisabled( false );
                }

                // Set/Render Capability Grid
                renderGrid_Capabilities( makeGrid_Capabilities( pi_Capabilities ), glbPanelTabItemId );

                // Set/Render Category Grid
                renderGrid_Categories( makeGrid_Categories( pi_Capabilities, pivotNames ), glbPanelTabItemId )

                // Set Capabiltiies Store
                //var store_Capabilities      = getStore_Capabilities( pi_Capabilities );

                //getStore_Capabilities( pi_Capabilities ).then({

                    //success: function( store_Capabilities ) {

//window.console && console.log ( "store_Capabilities:", store_Capabilities );

//window.console && console.log ( "store_Capabilities.data.items.length:", store_Capabilities.data.items.length );

                        //var grid_Capabilities       = getGrid_Capabilities( store_Capabilities );

//window.console && console.log ( "grid_Capabilities:", grid_Capabilities );

                        //renderGrid_Capabilities( grid_Capabilities, glbPanelTabItemId );

                        //renderGrid_Capabilities( getGrid_Capabilities( store_Capabilities ), glbPanelTabItemId );

                    //}
                //});
            };








            var setPivotStore               = function() {

                // PURPOSE: Return Datastore underlying Capabilities report

                // Get Categories of Capabilities
                var categoryData    = getPanelComboboxStore( 'panelCtrlTopBeta_upper' );

window.console && console.log ( "categoryData:", categoryData );

                // Get Owning Traina
                var trainData    = getPanelComboboxStore( 'panelCtrlTopCenter_upper' );

window.console && console.log ( "trainData:", trainData );

                // Get Column names for pivot table
                var columnCfgs  = setGridColumnConfigs( trainData );

window.console && console.log ( "columnCfgs:", columnCfgs );


                // Build Pivot Model
                



                // Crawl Categories and Columns summing up individual Capabilities




            };



            var getPanelComboboxStore       = function( panelName ) {

                // PURPOSE: Return a reference to the data underlying a Panel's Combobox

                // Get reference to Combobox
                var panelCombobox           = Ext.getCmp( panelName + '_combobox' );

                // Set reference to Combobox datastore
                var panelComboboxStore      = panelCombobox.store.data.items;

                // Return datastore
                return( panelComboboxStore );

            };


            var setGridColumnConfigs        = function( trainData ) {

                // PURPOSE: Set pivot table columns for AETNA Capacity reporting

                // Initialize Column configuration
                var columnCfgs              = [];
                var colCfg                  = '';
                var colWidth                = 90;
                var colName                 = '';

                // Prepend configuration with known (static) column values
                columnCfgs.push({
                        
                        text: 'Priority',
                        dataIndex: 'priority',
                        minWidth: colWidth,
                        maxWidth: colWidth,
                        sortable: true,
                        hideable: true

                });

                columnCfgs.push({
                        
                        text: 'Category',
                        dataIndex: 'category',
                        minWidth: 120,
                        maxWidth: 120,
                        sortable: true,
                        hideable: true

                });

                // Append configuration with unknown (dynamic) column values
                for (i = 0; i < trainData.length; i++) {

                    // Handle display name for missing data
                    colName                 = trainData[i].data.Name;

                    if ( colName == glbEmptyValue ) {

                        colName             = 'No Owner';
                    }

                    var colCfg              = {

                        text:       colName,
                        dataIndex:  trainData[i].data.Name,
                        minWidth:   colWidth,
                        maxWidth:   colWidth,
                        sortable:   true,
                        hideble:    true
                    };

                    columnCfgs.push( colCfg );
                }

                // Postpend configuration with remianing known (static) column values
                columnCfgs.push({
                        
                        text: 'Total',
                        dataIndex: 'total',
                        minWidth: colWidth,
                        maxWidth: colWidth,
                        sortable: true,
                        hideable: true

                });

                columnCfgs.push({
                        
                        text: 'To Do',
                        dataIndex: 'to_do',
                        minWidth: colWidth,
                        maxWidth: colWidth,
                        sortable: true,
                        hideable: true

                });

                columnCfgs.push({
                        
                        text: 'In Progress',
                        dataIndex: 'in_progress',
                        minWidth: colWidth,
                        maxWidth: colWidth,
                        sortable: true,
                        hideable: true

                });

                columnCfgs.push({
                        
                        text:       'Done',
                        dataIndex:  'done',
                        minWidth:   colWidth,
                        maxWidth:   colWidth,
                        sortable:   true,
                        hideable:   true

                });

                columnCfgs.push({
                        
                        text:       'LOB',
                        dataIndex:  'LOB',
                        minWidth:   colWidth,
                        maxWidth:   colWidth,
                        sortable:   true,
                        hideable:   true

                });

                // Return column configuration
                return( columnCfgs );

            };


            var getGridColumnValues         = function( rawData, columnName ) {

                // PURPOSE: Return array of unique values extracted from columnar data

                // Loop through data
                Ext.Array.each( rawData, function( record ) {

window.console && console.log ( "record.get(columnName).Name:", record.get(columnName).Name );

                    record.get(columnName).Name

                });
            };


            Ext.define('GridExporter', {
                
                dateFormat : 'Y-m-d g:i',

                exportGrid: function(grid) {
                
                    if (Ext.isIE) {
                
                        this._ieToExcel(grid);

                    } else {
                
                        var data = this._getCSV(grid);

                        window.location = 'data:text/csv;charset=utf8,' + encodeURIComponent(data);
                    }
                },

                _escapeForCSV: function(string) {

                    if (string.match(/,/)) {

                        if (!string.match(/"/)) {

                            string = '"' + string + '"';

                        } else {

                            string = string.replace(/,/g, ''); // comma's and quotes-- sorry, just loose the commas
                        }
                    }
                    return string;
                },

                _getFieldText: function(fieldData) {
                    var text;

                    if (fieldData == null || fieldData == undefined) {
                        text = '';

                    } else if (fieldData._refObjectName && !fieldData.getMonth) {
                        text = fieldData._refObjectName;

                    } else if (fieldData instanceof Date) {
                        text = Ext.Date.format(fieldData, this.dateFormat);

                    } else if (!fieldData.match) { // not a string or object we recognize...blank it out
                        text = '';

                    } else {
                        text = fieldData;
                    }

                    return text;
                },

                _getFieldTextAndEscape: function(fieldData) {
                    var string  = this._getFieldText(fieldData);

                    return this._escapeForCSV(string);
                },

                _getCSV: function (grid) {
                    var cols    = grid.columns;
                    var store   = grid.store;
                    var data    = '';

                    var that = this;
                    Ext.Array.each(cols, function(col, index) {
                        if (col.hidden != true) {
                            data += that._getFieldTextAndEscape(col.text) + ',';
                        }
                    });
                    data += "\n";

                    store.each(function(record) {
                        var entry       = record.getData();
                        Ext.Array.each(cols, function(col, index) {
                            if (col.hidden != true) {
                                var fieldName   = col.dataIndex;
                                var text        = entry[fieldName];

                                data += that._getFieldTextAndEscape(text) + ',';
                            }
                        });
                        data += "\n";
                    });

                    return data;
                },

                _ieGetGridData : function(grid, sheet) {

                    var that            = this;

                    var resourceItems   = grid.store.data.items;

                    var cols            = grid.columns;

                    Ext.Array.each(cols, function(col, colIndex) {

                        if (col.hidden != true) {

                            console.log('header: ', col.text);

                            sheet.cells( 1, colIndex + 1 ).value = col.text;
                        }
                    });

                    var rowIndex = 2;

                    grid.store.each(function(record) {

                        var entry   = record.getData();

                        Ext.Array.each(cols, function(col, colIndex) {

                            if (col.hidden != true) {

                                var fieldName   = col.dataIndex;

                                var text        = entry[fieldName];

                                var value       = that._getFieldText(text);

                                sheet.cells(rowIndex, colIndex+1).value = value;
                            }
                        });

                        rowIndex++;
                    });
                },

                _ieToExcel: function (grid) {

                    if (window.ActiveXObject){

                        var  xlApp, xlBook;

                        try {

                            xlApp = new ActiveXObject("Excel.Application"); 

                            xlBook = xlApp.Workbooks.Add();

                        } catch (e) {

                            Ext.Msg.alert('Error', 'For the export to work in IE, you have to enable a security setting called "Initialize and script ActiveX control not marked as safe" from Internet Options -> Security -> Custom level..."');

                            return;
                        }

                        xlBook.worksheets("Sheet1").activate;

                        var XlSheet = xlBook.activeSheet;

                        xlApp.visible = true; 

                       this._ieGetGridData(grid, XlSheet);
                       XlSheet.columns.autofit; 
                    }
                }
            });


            /**
             * @class Ext.ux.button.BadgeButton
             * @extends Ext.button.Button
             * 
             * credit: Tomasz Jagusz
             * based on: http://blogs.walkingtree.in/2012/07/16/badge-text-in-extjs-4-1/
             * based on: https://github.com/vondervick/ext/tree/master/badge_button
             */

            Ext.define('Ext.ux.button.BadgeButton', {

                extend: 'Ext.button.Button',

                alias: 'widget.badgebutton',

                config: {

                    badgeText: ''
                },

                renderTpl: ['<span id="{id}-btnWrap" class="{baseCls}-wrap', 

                    '<tpl if="splitCls"> {splitCls}</tpl>', 

                    '{childElCls}" unselectable="on">', 

                    '<span id="{id}-btnEl" class="{baseCls}-button {baseCls}-hasBadge">', 

                    '<span id="{id}-btnInnerEl" class="{baseCls}-inner {innerCls}', 

                    '{childElCls}" unselectable="on">', 

                    '{text}', 

                    '</span>', 

                    '<span id="{id}-btnBadge" class="{baseCls}-badgeCls ',
                    
                    '<tpl if="Ext.isEmpty(badgeText)">hide-badge</tpl>',
                    
                    '" reference="badgeElement" unselectable="on">{badgeText}</span>', 

                    '<span role="img" id="{id}-btnIconEl" class="{baseCls}-icon-el {iconCls}', 

                    '{childElCls} {glyphCls}" unselectable="on" style="', 

                    '<tpl if="iconUrl">background-image:url({iconUrl});</tpl>', 

                    '<tpl if="glyph && glyphFontFamily">font-family:{glyphFontFamily};</tpl>">', 

                    '<tpl if="glyph">&#{glyph};</tpl><tpl if="iconCls || iconUrl">&#160;</tpl>', 

                    '</span>', 

                    '</span>', 

                    '</span>',

                    '<tpl if="closable">', '<span id="{id}-closeEl" class="{baseCls}-close-btn" title="{closeText}" tabIndex="0"></span>', '</tpl>'
                ],

                childEls: ['btnBadge'],

                initComponent: function(config) {

                    Ext.apply(this.config, config);

                    this.callParent(arguments);

                    this.addEvents(
                    /**
                     * @event badgetextchange
                     * Fired when the button's badge text is changed by the {@link #setBadgeText} method.
                     * @param {Ext.ux.container.BadgeButton} this
                     * @param {String} oldText
                     * @param {String} newText
                     */'badgetextchange');
                },

                getTemplateArgs: function() {

                    var me = this,
                        
                        glyph = me.glyph,
                        
                        glyphFontFamily = Ext._glyphFontFamily,
                        
                        glyphParts;

                    if (typeof glyph === 'string') {
                        
                        glyphParts = glyph.split('@');
                        
                        glyph = glyphParts[0];
                        
                        glyphFontFamily = glyphParts[1];
                    }

                    return {
                        
                        innerCls: me.getInnerCls(),
                        
                        splitCls: me.getSplitCls(),
                        
                        iconUrl: me.icon,
                        
                        iconCls: me.iconCls,
                        
                        glyph: glyph,
                        
                        glyphCls: glyph ? me.glyphCls : '',
                        
                        glyphFontFamily: glyphFontFamily,
                        
                        text: me.text || '&#160;',
                        
                        badgeText: me.badgeText || undefined
                    };
                },


                /**
                 * Sets this Button's Badge text
                 * @param {String} text The button badge text
                 * @return {Ext.ux.container.BadgeButton} this
                 */
                setBadgeText: function(text) {

                    text = text || '';

                    var me = this,

                        oldBadgeText = me.badgeText || '';

                    // Handle changed Badge text
                    if (text != oldBadgeText) {

                        // Handle empty Badge
                        if (Ext.isEmpty(text)) {
                            
                            me.btnBadge.addCls('hide-badge');
                        
                        } else {
                            
                            me.btnBadge.removeCls('hide-badge');
                        }

                        // Render reset Badge text
                        me.badgeText = text;
                        
                        if (me.rendered) {
                            
                            me.btnBadge.update(text || '');

                            // Handle IE-specific issues
                            if (Ext.isStrict && Ext.isIE8) {

                                // Handle weird repaint issue causes it to not resize
                                me.el.repaint();
                            }
                        }

                        me.fireEvent('badgetextchange', me, oldBadgeText, text);
                    }

                    return me;
                }
            });


            // Set Panel Architecture
            Ext.define('Rally.example.ExportableGridBoard', {
                
                extend:         'Rally.app.App',

                componentCls:   'app',
            
                items:          setControlPanelToolbarItems(),

                launch: function() {

                    // Initialize global variables
                    var that                                = this;
                    var msgText                             = '';

                    // Set Container
                    glbViewContainer                        = that.items;

                    // Get Current Project
                    var currentProject                      = that.getContext().getProject();
                    glbCurrentProject                       = currentProject;
                    glbSelectedProjectID                      = glbCurrentProject.ObjectID

//window.console && console.log ( "glbCurrentProject:", glbCurrentProject );
//window.console && console.log ( "glbSelectedProjectID:", glbSelectedProjectID );

                    // Instantiate ProgressBar
                    var progressBar                         = setProgressBar();
                    progressBar.hide();
                    glbProgressBar                          = progressBar;
                    glbProgressBarTotal                     = 0.0;

                    // Instantiate Timer
                    msgText                                 = 'Loading ... ';
                    var timerInterval                       = setInterval(function () { refreshTimerBar( glbProgressBar, 0.01, msgText, ' secs', false ) }, 1000);

                    // Set array of populated Panel Names
                    var activePanels                        = [];

                    // Set refernce to Capabilities Project Folder
                    var cpblty_Source                       = null;

                    // Fetch values for Kanban States
                    getStates_Kanban().then({

                        success: function( kanbanStates ) {

                            // Set global reference to Top Projects
                            glbStates                       = kanbanStates;
                        }
                    });

                    // Set Source Projects array of projects atop the project hierarchy (w/o Parent projects)
                    getProjectsAllAtop().then({

                        success: function( proj_Atop ) {

//window.console && console.log ("proj_Atop:", proj_Atop);

                            // Handle existing projects ONLY
                            if ( proj_Atop.length > 0 ) {

                                // Enumerate through Project Sources
                                Ext.Array.each( proj_Atop, function( src_proj ) {

                                    // Add each project to global array
                                    addSourceProject( src_proj );

//window.console && console.log ("glbCapabilityProjectID:", glbCapabilityProjectID);
//window.console && console.log ("src_proj..ObjectID:", src_proj.ObjectID);

                                    // Determine match
                                    if ( src_proj.ObjectID == glbCapabilityProjectID ) {

                                        // Set reference to Capabilities project folder
                                        cpblty_Source       = src_proj;

//window.console && console.log ("cpblty_Source:", cpblty_Source);

                                    }
                                });

                                // Set current Project as default if successfully added to SourceProjects array
                                defaultObjectID                 = currentProject.ObjectID;

                                // Add current Project
                                if ( addSourceProject( currentProject ) ) {

                                    // Set current Project as default if successfully added to SourceProjects array
                                    defaultObjectID             = currentProject.ObjectID;
                                }

                                // Set current project as default
                                setSourceProjectDefault( defaultObjectID );

                                // Get current project
                                var proj_Source                 = currentProject;

                                // Fetch AETNA Capabilities
                                getFeaturesOfInterest_AETNA( proj_Source, cpblty_Source ).then({

                                    success: function( piCapabilities_AETNA ) {

                                        // Handle found items ONLY
                                        if ( piCapabilities_AETNA.length > 0 ) {

window.console && console.log ("piCapabilities_AETNA.length:", piCapabilities_AETNA.length);

                                            // Set global reference to Capabilities found
                                            glbCapabilities_AETNA       = piCapabilities_AETNA;

window.console && console.log ("glbCapabilities_AETNA.length:", glbCapabilities_AETNA.length);

                                            // Build Combobox Panels
                                            var activePanels    = getActiveControlPanels();

                                            // Set global reference to Panels with Comboboxes
                                            glbComboboxPanels   = activePanels;

window.console && console.log ("glbComboboxPanels:", glbComboboxPanels);

                                            // Populate Control Panels                                        
                                            setControlPanelToolbar( piCapabilities_AETNA, activePanels );

                                            // Reset combobxes
                                            resetControlPanelComboboxes( activePanels );

                                            // Timer - Stop processing ...
                                            msgText             = 'Ready ... ';
                                            clearInterval( timerInterval );         // Stop interval
                                            refreshTimerBar( glbProgressBar, 1.0 - glbProgressBar.value, msgText, '%', true );

                                        } else {

                                            // Timer - Stop processing ...
                                            msgText         = "No Features found!";

                                            clearInterval( timerInterval );         // Stop interval
                                            refreshTimerBar( glbProgressBar, '', msgText, '', false );
                                        }
                                    },

                                    error: function( model, error ) {

                                        // Timer - Stop processing ...
                                        msgText         = "No Features found!";

                                        clearInterval( timerInterval );         // Stop interval
                                        refreshTimerBar( glbProgressBar, '', msgText, '', true );
                                    }
                                });
                            }
                        }
                    });

            
                    //Build Custom Data Store

                    // Build MODEL
                }
            });
            
            Rally.launchApp('Rally.example.ExportableGridBoard', {
                name: 'AETNA Capability Status',
                author: 'Copyright 2010-2019 James Gaines - contact: James.Gaines@D3Mgmt.com -- +1 (312) 375 0140'
            });

        });
    </script>

    <style type="text/css">
        
    </style>
</head>
<body></body>
</html>
